
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Partner
 * 
 */
export type Partner = $Result.DefaultSelection<Prisma.$PartnerPayload>
/**
 * Model Trip
 * 
 */
export type Trip = $Result.DefaultSelection<Prisma.$TripPayload>
/**
 * Model POI
 * 
 */
export type POI = $Result.DefaultSelection<Prisma.$POIPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Trigger
 * 
 */
export type Trigger = $Result.DefaultSelection<Prisma.$TriggerPayload>
/**
 * Model HostProfile
 * 
 */
export type HostProfile = $Result.DefaultSelection<Prisma.$HostProfilePayload>
/**
 * Model AudioPack
 * 
 */
export type AudioPack = $Result.DefaultSelection<Prisma.$AudioPackPayload>
/**
 * Model BanterEvent
 * 
 */
export type BanterEvent = $Result.DefaultSelection<Prisma.$BanterEventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TripStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

export type TripStatus = (typeof TripStatus)[keyof typeof TripStatus]


export const POICategory: {
  LANDMARK: 'LANDMARK',
  NATURE: 'NATURE',
  PARTNER_LOCATION: 'PARTNER_LOCATION',
  FUN_FACT: 'FUN_FACT',
  TRAFFIC_ALERT: 'TRAFFIC_ALERT'
};

export type POICategory = (typeof POICategory)[keyof typeof POICategory]


export const HostPersonaType: {
  HOST: 'HOST',
  NAVIGATOR: 'NAVIGATOR'
};

export type HostPersonaType = (typeof HostPersonaType)[keyof typeof HostPersonaType]


export const TTSService: {
  ELEVENLABS: 'ELEVENLABS',
  GOOGLE_TTS: 'GOOGLE_TTS',
  PLAY_HT: 'PLAY_HT'
};

export type TTSService = (typeof TTSService)[keyof typeof TTSService]


export const BanterEventContext: {
  TRAFFIC_JAM: 'TRAFFIC_JAM',
  BEAUTIFUL_WEATHER: 'BEAUTIFUL_WEATHER',
  HALFWAY_POINT: 'HALFWAY_POINT',
  NEARING_DESTINATION: 'NEARING_DESTINATION'
};

export type BanterEventContext = (typeof BanterEventContext)[keyof typeof BanterEventContext]

}

export type TripStatus = $Enums.TripStatus

export const TripStatus: typeof $Enums.TripStatus

export type POICategory = $Enums.POICategory

export const POICategory: typeof $Enums.POICategory

export type HostPersonaType = $Enums.HostPersonaType

export const HostPersonaType: typeof $Enums.HostPersonaType

export type TTSService = $Enums.TTSService

export const TTSService: typeof $Enums.TTSService

export type BanterEventContext = $Enums.BanterEventContext

export const BanterEventContext: typeof $Enums.BanterEventContext

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.partner`: Exposes CRUD operations for the **Partner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partner.findMany()
    * ```
    */
  get partner(): Prisma.PartnerDelegate<ExtArgs>;

  /**
   * `prisma.trip`: Exposes CRUD operations for the **Trip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trips
    * const trips = await prisma.trip.findMany()
    * ```
    */
  get trip(): Prisma.TripDelegate<ExtArgs>;

  /**
   * `prisma.pOI`: Exposes CRUD operations for the **POI** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more POIS
    * const pOIS = await prisma.pOI.findMany()
    * ```
    */
  get pOI(): Prisma.POIDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.trigger`: Exposes CRUD operations for the **Trigger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Triggers
    * const triggers = await prisma.trigger.findMany()
    * ```
    */
  get trigger(): Prisma.TriggerDelegate<ExtArgs>;

  /**
   * `prisma.hostProfile`: Exposes CRUD operations for the **HostProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostProfiles
    * const hostProfiles = await prisma.hostProfile.findMany()
    * ```
    */
  get hostProfile(): Prisma.HostProfileDelegate<ExtArgs>;

  /**
   * `prisma.audioPack`: Exposes CRUD operations for the **AudioPack** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AudioPacks
    * const audioPacks = await prisma.audioPack.findMany()
    * ```
    */
  get audioPack(): Prisma.AudioPackDelegate<ExtArgs>;

  /**
   * `prisma.banterEvent`: Exposes CRUD operations for the **BanterEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BanterEvents
    * const banterEvents = await prisma.banterEvent.findMany()
    * ```
    */
  get banterEvent(): Prisma.BanterEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Partner: 'Partner',
    Trip: 'Trip',
    POI: 'POI',
    Message: 'Message',
    Trigger: 'Trigger',
    HostProfile: 'HostProfile',
    AudioPack: 'AudioPack',
    BanterEvent: 'BanterEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "partner" | "trip" | "pOI" | "message" | "trigger" | "hostProfile" | "audioPack" | "banterEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Partner: {
        payload: Prisma.$PartnerPayload<ExtArgs>
        fields: Prisma.PartnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findFirst: {
            args: Prisma.PartnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findMany: {
            args: Prisma.PartnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          create: {
            args: Prisma.PartnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          createMany: {
            args: Prisma.PartnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          delete: {
            args: Prisma.PartnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          update: {
            args: Prisma.PartnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          deleteMany: {
            args: Prisma.PartnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          aggregate: {
            args: Prisma.PartnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartner>
          }
          groupBy: {
            args: Prisma.PartnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnerCountArgs<ExtArgs>
            result: $Utils.Optional<PartnerCountAggregateOutputType> | number
          }
        }
      }
      Trip: {
        payload: Prisma.$TripPayload<ExtArgs>
        fields: Prisma.TripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TripFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TripFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          findFirst: {
            args: Prisma.TripFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TripFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          findMany: {
            args: Prisma.TripFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>[]
          }
          create: {
            args: Prisma.TripCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          createMany: {
            args: Prisma.TripCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TripCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>[]
          }
          delete: {
            args: Prisma.TripDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          update: {
            args: Prisma.TripUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          deleteMany: {
            args: Prisma.TripDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TripUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TripUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TripPayload>
          }
          aggregate: {
            args: Prisma.TripAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrip>
          }
          groupBy: {
            args: Prisma.TripGroupByArgs<ExtArgs>
            result: $Utils.Optional<TripGroupByOutputType>[]
          }
          count: {
            args: Prisma.TripCountArgs<ExtArgs>
            result: $Utils.Optional<TripCountAggregateOutputType> | number
          }
        }
      }
      POI: {
        payload: Prisma.$POIPayload<ExtArgs>
        fields: Prisma.POIFieldRefs
        operations: {
          findUnique: {
            args: Prisma.POIFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.POIFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          findFirst: {
            args: Prisma.POIFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.POIFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          findMany: {
            args: Prisma.POIFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>[]
          }
          create: {
            args: Prisma.POICreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          createMany: {
            args: Prisma.POICreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.POICreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>[]
          }
          delete: {
            args: Prisma.POIDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          update: {
            args: Prisma.POIUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          deleteMany: {
            args: Prisma.POIDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.POIUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.POIUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$POIPayload>
          }
          aggregate: {
            args: Prisma.POIAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePOI>
          }
          groupBy: {
            args: Prisma.POIGroupByArgs<ExtArgs>
            result: $Utils.Optional<POIGroupByOutputType>[]
          }
          count: {
            args: Prisma.POICountArgs<ExtArgs>
            result: $Utils.Optional<POICountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Trigger: {
        payload: Prisma.$TriggerPayload<ExtArgs>
        fields: Prisma.TriggerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TriggerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TriggerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          findFirst: {
            args: Prisma.TriggerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TriggerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          findMany: {
            args: Prisma.TriggerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>[]
          }
          create: {
            args: Prisma.TriggerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          createMany: {
            args: Prisma.TriggerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TriggerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>[]
          }
          delete: {
            args: Prisma.TriggerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          update: {
            args: Prisma.TriggerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          deleteMany: {
            args: Prisma.TriggerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TriggerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TriggerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          aggregate: {
            args: Prisma.TriggerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrigger>
          }
          groupBy: {
            args: Prisma.TriggerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TriggerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TriggerCountArgs<ExtArgs>
            result: $Utils.Optional<TriggerCountAggregateOutputType> | number
          }
        }
      }
      HostProfile: {
        payload: Prisma.$HostProfilePayload<ExtArgs>
        fields: Prisma.HostProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          findFirst: {
            args: Prisma.HostProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          findMany: {
            args: Prisma.HostProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>[]
          }
          create: {
            args: Prisma.HostProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          createMany: {
            args: Prisma.HostProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>[]
          }
          delete: {
            args: Prisma.HostProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          update: {
            args: Prisma.HostProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          deleteMany: {
            args: Prisma.HostProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HostProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostProfilePayload>
          }
          aggregate: {
            args: Prisma.HostProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostProfile>
          }
          groupBy: {
            args: Prisma.HostProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostProfileCountArgs<ExtArgs>
            result: $Utils.Optional<HostProfileCountAggregateOutputType> | number
          }
        }
      }
      AudioPack: {
        payload: Prisma.$AudioPackPayload<ExtArgs>
        fields: Prisma.AudioPackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AudioPackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AudioPackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          findFirst: {
            args: Prisma.AudioPackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AudioPackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          findMany: {
            args: Prisma.AudioPackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>[]
          }
          create: {
            args: Prisma.AudioPackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          createMany: {
            args: Prisma.AudioPackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AudioPackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>[]
          }
          delete: {
            args: Prisma.AudioPackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          update: {
            args: Prisma.AudioPackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          deleteMany: {
            args: Prisma.AudioPackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AudioPackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AudioPackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPackPayload>
          }
          aggregate: {
            args: Prisma.AudioPackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAudioPack>
          }
          groupBy: {
            args: Prisma.AudioPackGroupByArgs<ExtArgs>
            result: $Utils.Optional<AudioPackGroupByOutputType>[]
          }
          count: {
            args: Prisma.AudioPackCountArgs<ExtArgs>
            result: $Utils.Optional<AudioPackCountAggregateOutputType> | number
          }
        }
      }
      BanterEvent: {
        payload: Prisma.$BanterEventPayload<ExtArgs>
        fields: Prisma.BanterEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BanterEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BanterEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          findFirst: {
            args: Prisma.BanterEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BanterEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          findMany: {
            args: Prisma.BanterEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>[]
          }
          create: {
            args: Prisma.BanterEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          createMany: {
            args: Prisma.BanterEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BanterEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>[]
          }
          delete: {
            args: Prisma.BanterEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          update: {
            args: Prisma.BanterEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          deleteMany: {
            args: Prisma.BanterEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BanterEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BanterEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanterEventPayload>
          }
          aggregate: {
            args: Prisma.BanterEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanterEvent>
          }
          groupBy: {
            args: Prisma.BanterEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<BanterEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.BanterEventCountArgs<ExtArgs>
            result: $Utils.Optional<BanterEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    trips: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | UserCountOutputTypeCountTripsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripWhereInput
  }


  /**
   * Count Type PartnerCountOutputType
   */

  export type PartnerCountOutputType = {
    pois: number
  }

  export type PartnerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pois?: boolean | PartnerCountOutputTypeCountPoisArgs
  }

  // Custom InputTypes
  /**
   * PartnerCountOutputType without action
   */
  export type PartnerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartnerCountOutputType
     */
    select?: PartnerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartnerCountOutputType without action
   */
  export type PartnerCountOutputTypeCountPoisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: POIWhereInput
  }


  /**
   * Count Type POICountOutputType
   */

  export type POICountOutputType = {
    messages: number
  }

  export type POICountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | POICountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * POICountOutputType without action
   */
  export type POICountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POICountOutputType
     */
    select?: POICountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * POICountOutputType without action
   */
  export type POICountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    triggers: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggers?: boolean | MessageCountOutputTypeCountTriggersArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountTriggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriggerWhereInput
  }


  /**
   * Count Type HostProfileCountOutputType
   */

  export type HostProfileCountOutputType = {
    trips: number
    messages: number
    audioPacks: number
  }

  export type HostProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | HostProfileCountOutputTypeCountTripsArgs
    messages?: boolean | HostProfileCountOutputTypeCountMessagesArgs
    audioPacks?: boolean | HostProfileCountOutputTypeCountAudioPacksArgs
  }

  // Custom InputTypes
  /**
   * HostProfileCountOutputType without action
   */
  export type HostProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfileCountOutputType
     */
    select?: HostProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HostProfileCountOutputType without action
   */
  export type HostProfileCountOutputTypeCountTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripWhereInput
  }

  /**
   * HostProfileCountOutputType without action
   */
  export type HostProfileCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * HostProfileCountOutputType without action
   */
  export type HostProfileCountOutputTypeCountAudioPacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioPackWhereInput
  }


  /**
   * Count Type AudioPackCountOutputType
   */

  export type AudioPackCountOutputType = {
    hosts: number
  }

  export type AudioPackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hosts?: boolean | AudioPackCountOutputTypeCountHostsArgs
  }

  // Custom InputTypes
  /**
   * AudioPackCountOutputType without action
   */
  export type AudioPackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPackCountOutputType
     */
    select?: AudioPackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AudioPackCountOutputType without action
   */
  export type AudioPackCountOutputTypeCountHostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostProfileWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firebaseUid: string | null
    activeTripId: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firebaseUid: string | null
    activeTripId: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firebaseUid: number
    activeTripId: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firebaseUid?: true
    activeTripId?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firebaseUid?: true
    activeTripId?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firebaseUid?: true
    activeTripId?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firebaseUid: string
    activeTripId: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firebaseUid?: boolean
    activeTripId?: boolean
    createdAt?: boolean
    trips?: boolean | User$tripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firebaseUid?: boolean
    activeTripId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firebaseUid?: boolean
    activeTripId?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | User$tripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      trips: Prisma.$TripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firebaseUid: string
      activeTripId: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trips<T extends User$tripsArgs<ExtArgs> = {}>(args?: Subset<T, User$tripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firebaseUid: FieldRef<"User", 'String'>
    readonly activeTripId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.trips
   */
  export type User$tripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    where?: TripWhereInput
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    cursor?: TripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Partner
   */

  export type AggregatePartner = {
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  export type PartnerMinAggregateOutputType = {
    id: string | null
    name: string | null
    contactEmail: string | null
    createdAt: Date | null
  }

  export type PartnerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    contactEmail: string | null
    createdAt: Date | null
  }

  export type PartnerCountAggregateOutputType = {
    id: number
    name: number
    contactEmail: number
    createdAt: number
    _all: number
  }


  export type PartnerMinAggregateInputType = {
    id?: true
    name?: true
    contactEmail?: true
    createdAt?: true
  }

  export type PartnerMaxAggregateInputType = {
    id?: true
    name?: true
    contactEmail?: true
    createdAt?: true
  }

  export type PartnerCountAggregateInputType = {
    id?: true
    name?: true
    contactEmail?: true
    createdAt?: true
    _all?: true
  }

  export type PartnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partner to aggregate.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnerMaxAggregateInputType
  }

  export type GetPartnerAggregateType<T extends PartnerAggregateArgs> = {
        [P in keyof T & keyof AggregatePartner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartner[P]>
      : GetScalarType<T[P], AggregatePartner[P]>
  }




  export type PartnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnerWhereInput
    orderBy?: PartnerOrderByWithAggregationInput | PartnerOrderByWithAggregationInput[]
    by: PartnerScalarFieldEnum[] | PartnerScalarFieldEnum
    having?: PartnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnerCountAggregateInputType | true
    _min?: PartnerMinAggregateInputType
    _max?: PartnerMaxAggregateInputType
  }

  export type PartnerGroupByOutputType = {
    id: string
    name: string
    contactEmail: string
    createdAt: Date
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  type GetPartnerGroupByPayload<T extends PartnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnerGroupByOutputType[P]>
            : GetScalarType<T[P], PartnerGroupByOutputType[P]>
        }
      >
    >


  export type PartnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactEmail?: boolean
    createdAt?: boolean
    pois?: boolean | Partner$poisArgs<ExtArgs>
    _count?: boolean | PartnerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactEmail?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectScalar = {
    id?: boolean
    name?: boolean
    contactEmail?: boolean
    createdAt?: boolean
  }

  export type PartnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pois?: boolean | Partner$poisArgs<ExtArgs>
    _count?: boolean | PartnerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PartnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partner"
    objects: {
      pois: Prisma.$POIPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      contactEmail: string
      createdAt: Date
    }, ExtArgs["result"]["partner"]>
    composites: {}
  }

  type PartnerGetPayload<S extends boolean | null | undefined | PartnerDefaultArgs> = $Result.GetResult<Prisma.$PartnerPayload, S>

  type PartnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartnerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartnerCountAggregateInputType | true
    }

  export interface PartnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partner'], meta: { name: 'Partner' } }
    /**
     * Find zero or one Partner that matches the filter.
     * @param {PartnerFindUniqueArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnerFindUniqueArgs>(args: SelectSubset<T, PartnerFindUniqueArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Partner that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartnerFindUniqueOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnerFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Partner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnerFindFirstArgs>(args?: SelectSubset<T, PartnerFindFirstArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Partner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnerFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partner.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnerWithIdOnly = await prisma.partner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnerFindManyArgs>(args?: SelectSubset<T, PartnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Partner.
     * @param {PartnerCreateArgs} args - Arguments to create a Partner.
     * @example
     * // Create one Partner
     * const Partner = await prisma.partner.create({
     *   data: {
     *     // ... data to create a Partner
     *   }
     * })
     * 
     */
    create<T extends PartnerCreateArgs>(args: SelectSubset<T, PartnerCreateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Partners.
     * @param {PartnerCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnerCreateManyArgs>(args?: SelectSubset<T, PartnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnerCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnerCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Partner.
     * @param {PartnerDeleteArgs} args - Arguments to delete one Partner.
     * @example
     * // Delete one Partner
     * const Partner = await prisma.partner.delete({
     *   where: {
     *     // ... filter to delete one Partner
     *   }
     * })
     * 
     */
    delete<T extends PartnerDeleteArgs>(args: SelectSubset<T, PartnerDeleteArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Partner.
     * @param {PartnerUpdateArgs} args - Arguments to update one Partner.
     * @example
     * // Update one Partner
     * const partner = await prisma.partner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnerUpdateArgs>(args: SelectSubset<T, PartnerUpdateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Partners.
     * @param {PartnerDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnerDeleteManyArgs>(args?: SelectSubset<T, PartnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnerUpdateManyArgs>(args: SelectSubset<T, PartnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partner.
     * @param {PartnerUpsertArgs} args - Arguments to update or create a Partner.
     * @example
     * // Update or create a Partner
     * const partner = await prisma.partner.upsert({
     *   create: {
     *     // ... data to create a Partner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner we want to update
     *   }
     * })
     */
    upsert<T extends PartnerUpsertArgs>(args: SelectSubset<T, PartnerUpsertArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partner.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnerCountArgs>(
      args?: Subset<T, PartnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnerAggregateArgs>(args: Subset<T, PartnerAggregateArgs>): Prisma.PrismaPromise<GetPartnerAggregateType<T>>

    /**
     * Group by Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnerGroupByArgs['orderBy'] }
        : { orderBy?: PartnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partner model
   */
  readonly fields: PartnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pois<T extends Partner$poisArgs<ExtArgs> = {}>(args?: Subset<T, Partner$poisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partner model
   */ 
  interface PartnerFieldRefs {
    readonly id: FieldRef<"Partner", 'String'>
    readonly name: FieldRef<"Partner", 'String'>
    readonly contactEmail: FieldRef<"Partner", 'String'>
    readonly createdAt: FieldRef<"Partner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partner findUnique
   */
  export type PartnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findUniqueOrThrow
   */
  export type PartnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findFirst
   */
  export type PartnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findFirstOrThrow
   */
  export type PartnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findMany
   */
  export type PartnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner create
   */
  export type PartnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The data needed to create a Partner.
     */
    data: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
  }

  /**
   * Partner createMany
   */
  export type PartnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner createManyAndReturn
   */
  export type PartnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner update
   */
  export type PartnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The data needed to update a Partner.
     */
    data: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
    /**
     * Choose, which Partner to update.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner updateMany
   */
  export type PartnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
  }

  /**
   * Partner upsert
   */
  export type PartnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The filter to search for the Partner to update in case it exists.
     */
    where: PartnerWhereUniqueInput
    /**
     * In case the Partner found by the `where` argument doesn't exist, create a new Partner with this data.
     */
    create: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
    /**
     * In case the Partner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
  }

  /**
   * Partner delete
   */
  export type PartnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter which Partner to delete.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner deleteMany
   */
  export type PartnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnerWhereInput
  }

  /**
   * Partner.pois
   */
  export type Partner$poisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    where?: POIWhereInput
    orderBy?: POIOrderByWithRelationInput | POIOrderByWithRelationInput[]
    cursor?: POIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: POIScalarFieldEnum | POIScalarFieldEnum[]
  }

  /**
   * Partner without action
   */
  export type PartnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
  }


  /**
   * Model Trip
   */

  export type AggregateTrip = {
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  export type TripAvgAggregateOutputType = {
    originLat: number | null
    originLng: number | null
    destinationLat: number | null
    destinationLng: number | null
  }

  export type TripSumAggregateOutputType = {
    originLat: number | null
    originLng: number | null
    destinationLat: number | null
    destinationLng: number | null
  }

  export type TripMinAggregateOutputType = {
    id: string | null
    userId: string | null
    hostId: string | null
    status: $Enums.TripStatus | null
    originLat: number | null
    originLng: number | null
    destinationLat: number | null
    destinationLng: number | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type TripMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    hostId: string | null
    status: $Enums.TripStatus | null
    originLat: number | null
    originLng: number | null
    destinationLat: number | null
    destinationLng: number | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type TripCountAggregateOutputType = {
    id: number
    userId: number
    hostId: number
    status: number
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry: number
    startedAt: number
    endedAt: number
    _all: number
  }


  export type TripAvgAggregateInputType = {
    originLat?: true
    originLng?: true
    destinationLat?: true
    destinationLng?: true
  }

  export type TripSumAggregateInputType = {
    originLat?: true
    originLng?: true
    destinationLat?: true
    destinationLng?: true
  }

  export type TripMinAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    status?: true
    originLat?: true
    originLng?: true
    destinationLat?: true
    destinationLng?: true
    startedAt?: true
    endedAt?: true
  }

  export type TripMaxAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    status?: true
    originLat?: true
    originLng?: true
    destinationLat?: true
    destinationLng?: true
    startedAt?: true
    endedAt?: true
  }

  export type TripCountAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    status?: true
    originLat?: true
    originLng?: true
    destinationLat?: true
    destinationLng?: true
    routeGeometry?: true
    startedAt?: true
    endedAt?: true
    _all?: true
  }

  export type TripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trip to aggregate.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trips
    **/
    _count?: true | TripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TripMaxAggregateInputType
  }

  export type GetTripAggregateType<T extends TripAggregateArgs> = {
        [P in keyof T & keyof AggregateTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrip[P]>
      : GetScalarType<T[P], AggregateTrip[P]>
  }




  export type TripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TripWhereInput
    orderBy?: TripOrderByWithAggregationInput | TripOrderByWithAggregationInput[]
    by: TripScalarFieldEnum[] | TripScalarFieldEnum
    having?: TripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TripCountAggregateInputType | true
    _avg?: TripAvgAggregateInputType
    _sum?: TripSumAggregateInputType
    _min?: TripMinAggregateInputType
    _max?: TripMaxAggregateInputType
  }

  export type TripGroupByOutputType = {
    id: string
    userId: string
    hostId: string
    status: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry: JsonValue | null
    startedAt: Date
    endedAt: Date | null
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  type GetTripGroupByPayload<T extends TripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TripGroupByOutputType[P]>
            : GetScalarType<T[P], TripGroupByOutputType[P]>
        }
      >
    >


  export type TripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hostId?: boolean
    status?: boolean
    originLat?: boolean
    originLng?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    routeGeometry?: boolean
    startedAt?: boolean
    endedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trip"]>

  export type TripSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hostId?: boolean
    status?: boolean
    originLat?: boolean
    originLng?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    routeGeometry?: boolean
    startedAt?: boolean
    endedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trip"]>

  export type TripSelectScalar = {
    id?: boolean
    userId?: boolean
    hostId?: boolean
    status?: boolean
    originLat?: boolean
    originLng?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    routeGeometry?: boolean
    startedAt?: boolean
    endedAt?: boolean
  }

  export type TripInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }
  export type TripIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }

  export type $TripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trip"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      host: Prisma.$HostProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      hostId: string
      status: $Enums.TripStatus
      originLat: number
      originLng: number
      destinationLat: number
      destinationLng: number
      routeGeometry: Prisma.JsonValue | null
      startedAt: Date
      endedAt: Date | null
    }, ExtArgs["result"]["trip"]>
    composites: {}
  }

  type TripGetPayload<S extends boolean | null | undefined | TripDefaultArgs> = $Result.GetResult<Prisma.$TripPayload, S>

  type TripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TripFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TripCountAggregateInputType | true
    }

  export interface TripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trip'], meta: { name: 'Trip' } }
    /**
     * Find zero or one Trip that matches the filter.
     * @param {TripFindUniqueArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TripFindUniqueArgs>(args: SelectSubset<T, TripFindUniqueArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trip that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TripFindUniqueOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TripFindUniqueOrThrowArgs>(args: SelectSubset<T, TripFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindFirstArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TripFindFirstArgs>(args?: SelectSubset<T, TripFindFirstArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindFirstOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TripFindFirstOrThrowArgs>(args?: SelectSubset<T, TripFindFirstOrThrowArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trips
     * const trips = await prisma.trip.findMany()
     * 
     * // Get first 10 Trips
     * const trips = await prisma.trip.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tripWithIdOnly = await prisma.trip.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TripFindManyArgs>(args?: SelectSubset<T, TripFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trip.
     * @param {TripCreateArgs} args - Arguments to create a Trip.
     * @example
     * // Create one Trip
     * const Trip = await prisma.trip.create({
     *   data: {
     *     // ... data to create a Trip
     *   }
     * })
     * 
     */
    create<T extends TripCreateArgs>(args: SelectSubset<T, TripCreateArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trips.
     * @param {TripCreateManyArgs} args - Arguments to create many Trips.
     * @example
     * // Create many Trips
     * const trip = await prisma.trip.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TripCreateManyArgs>(args?: SelectSubset<T, TripCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trips and returns the data saved in the database.
     * @param {TripCreateManyAndReturnArgs} args - Arguments to create many Trips.
     * @example
     * // Create many Trips
     * const trip = await prisma.trip.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trips and only return the `id`
     * const tripWithIdOnly = await prisma.trip.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TripCreateManyAndReturnArgs>(args?: SelectSubset<T, TripCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trip.
     * @param {TripDeleteArgs} args - Arguments to delete one Trip.
     * @example
     * // Delete one Trip
     * const Trip = await prisma.trip.delete({
     *   where: {
     *     // ... filter to delete one Trip
     *   }
     * })
     * 
     */
    delete<T extends TripDeleteArgs>(args: SelectSubset<T, TripDeleteArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trip.
     * @param {TripUpdateArgs} args - Arguments to update one Trip.
     * @example
     * // Update one Trip
     * const trip = await prisma.trip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TripUpdateArgs>(args: SelectSubset<T, TripUpdateArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trips.
     * @param {TripDeleteManyArgs} args - Arguments to filter Trips to delete.
     * @example
     * // Delete a few Trips
     * const { count } = await prisma.trip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TripDeleteManyArgs>(args?: SelectSubset<T, TripDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trips
     * const trip = await prisma.trip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TripUpdateManyArgs>(args: SelectSubset<T, TripUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trip.
     * @param {TripUpsertArgs} args - Arguments to update or create a Trip.
     * @example
     * // Update or create a Trip
     * const trip = await prisma.trip.upsert({
     *   create: {
     *     // ... data to create a Trip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trip we want to update
     *   }
     * })
     */
    upsert<T extends TripUpsertArgs>(args: SelectSubset<T, TripUpsertArgs<ExtArgs>>): Prisma__TripClient<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripCountArgs} args - Arguments to filter Trips to count.
     * @example
     * // Count the number of Trips
     * const count = await prisma.trip.count({
     *   where: {
     *     // ... the filter for the Trips we want to count
     *   }
     * })
    **/
    count<T extends TripCountArgs>(
      args?: Subset<T, TripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TripAggregateArgs>(args: Subset<T, TripAggregateArgs>): Prisma.PrismaPromise<GetTripAggregateType<T>>

    /**
     * Group by Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TripGroupByArgs['orderBy'] }
        : { orderBy?: TripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trip model
   */
  readonly fields: TripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    host<T extends HostProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostProfileDefaultArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trip model
   */ 
  interface TripFieldRefs {
    readonly id: FieldRef<"Trip", 'String'>
    readonly userId: FieldRef<"Trip", 'String'>
    readonly hostId: FieldRef<"Trip", 'String'>
    readonly status: FieldRef<"Trip", 'TripStatus'>
    readonly originLat: FieldRef<"Trip", 'Float'>
    readonly originLng: FieldRef<"Trip", 'Float'>
    readonly destinationLat: FieldRef<"Trip", 'Float'>
    readonly destinationLng: FieldRef<"Trip", 'Float'>
    readonly routeGeometry: FieldRef<"Trip", 'Json'>
    readonly startedAt: FieldRef<"Trip", 'DateTime'>
    readonly endedAt: FieldRef<"Trip", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Trip findUnique
   */
  export type TripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where: TripWhereUniqueInput
  }

  /**
   * Trip findUniqueOrThrow
   */
  export type TripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where: TripWhereUniqueInput
  }

  /**
   * Trip findFirst
   */
  export type TripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }

  /**
   * Trip findFirstOrThrow
   */
  export type TripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trip to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }

  /**
   * Trip findMany
   */
  export type TripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter, which Trips to fetch.
     */
    where?: TripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trips to fetch.
     */
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trips.
     */
    cursor?: TripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trips.
     */
    skip?: number
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }

  /**
   * Trip create
   */
  export type TripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The data needed to create a Trip.
     */
    data: XOR<TripCreateInput, TripUncheckedCreateInput>
  }

  /**
   * Trip createMany
   */
  export type TripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trips.
     */
    data: TripCreateManyInput | TripCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trip createManyAndReturn
   */
  export type TripCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Trips.
     */
    data: TripCreateManyInput | TripCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trip update
   */
  export type TripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The data needed to update a Trip.
     */
    data: XOR<TripUpdateInput, TripUncheckedUpdateInput>
    /**
     * Choose, which Trip to update.
     */
    where: TripWhereUniqueInput
  }

  /**
   * Trip updateMany
   */
  export type TripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trips.
     */
    data: XOR<TripUpdateManyMutationInput, TripUncheckedUpdateManyInput>
    /**
     * Filter which Trips to update
     */
    where?: TripWhereInput
  }

  /**
   * Trip upsert
   */
  export type TripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * The filter to search for the Trip to update in case it exists.
     */
    where: TripWhereUniqueInput
    /**
     * In case the Trip found by the `where` argument doesn't exist, create a new Trip with this data.
     */
    create: XOR<TripCreateInput, TripUncheckedCreateInput>
    /**
     * In case the Trip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TripUpdateInput, TripUncheckedUpdateInput>
  }

  /**
   * Trip delete
   */
  export type TripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    /**
     * Filter which Trip to delete.
     */
    where: TripWhereUniqueInput
  }

  /**
   * Trip deleteMany
   */
  export type TripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trips to delete
     */
    where?: TripWhereInput
  }

  /**
   * Trip without action
   */
  export type TripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
  }


  /**
   * Model POI
   */

  export type AggregatePOI = {
    _count: POICountAggregateOutputType | null
    _avg: POIAvgAggregateOutputType | null
    _sum: POISumAggregateOutputType | null
    _min: POIMinAggregateOutputType | null
    _max: POIMaxAggregateOutputType | null
  }

  export type POIAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    geofenceRadiusMeters: number | null
  }

  export type POISumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    geofenceRadiusMeters: number | null
  }

  export type POIMinAggregateOutputType = {
    id: string | null
    partnerId: string | null
    name: string | null
    description: string | null
    category: $Enums.POICategory | null
    latitude: number | null
    longitude: number | null
    geofenceRadiusMeters: number | null
  }

  export type POIMaxAggregateOutputType = {
    id: string | null
    partnerId: string | null
    name: string | null
    description: string | null
    category: $Enums.POICategory | null
    latitude: number | null
    longitude: number | null
    geofenceRadiusMeters: number | null
  }

  export type POICountAggregateOutputType = {
    id: number
    partnerId: number
    name: number
    description: number
    category: number
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    _all: number
  }


  export type POIAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    geofenceRadiusMeters?: true
  }

  export type POISumAggregateInputType = {
    latitude?: true
    longitude?: true
    geofenceRadiusMeters?: true
  }

  export type POIMinAggregateInputType = {
    id?: true
    partnerId?: true
    name?: true
    description?: true
    category?: true
    latitude?: true
    longitude?: true
    geofenceRadiusMeters?: true
  }

  export type POIMaxAggregateInputType = {
    id?: true
    partnerId?: true
    name?: true
    description?: true
    category?: true
    latitude?: true
    longitude?: true
    geofenceRadiusMeters?: true
  }

  export type POICountAggregateInputType = {
    id?: true
    partnerId?: true
    name?: true
    description?: true
    category?: true
    latitude?: true
    longitude?: true
    geofenceRadiusMeters?: true
    _all?: true
  }

  export type POIAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which POI to aggregate.
     */
    where?: POIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of POIS to fetch.
     */
    orderBy?: POIOrderByWithRelationInput | POIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: POIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` POIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` POIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned POIS
    **/
    _count?: true | POICountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: POIAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: POISumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: POIMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: POIMaxAggregateInputType
  }

  export type GetPOIAggregateType<T extends POIAggregateArgs> = {
        [P in keyof T & keyof AggregatePOI]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePOI[P]>
      : GetScalarType<T[P], AggregatePOI[P]>
  }




  export type POIGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: POIWhereInput
    orderBy?: POIOrderByWithAggregationInput | POIOrderByWithAggregationInput[]
    by: POIScalarFieldEnum[] | POIScalarFieldEnum
    having?: POIScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: POICountAggregateInputType | true
    _avg?: POIAvgAggregateInputType
    _sum?: POISumAggregateInputType
    _min?: POIMinAggregateInputType
    _max?: POIMaxAggregateInputType
  }

  export type POIGroupByOutputType = {
    id: string
    partnerId: string | null
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    _count: POICountAggregateOutputType | null
    _avg: POIAvgAggregateOutputType | null
    _sum: POISumAggregateOutputType | null
    _min: POIMinAggregateOutputType | null
    _max: POIMaxAggregateOutputType | null
  }

  type GetPOIGroupByPayload<T extends POIGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<POIGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof POIGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], POIGroupByOutputType[P]>
            : GetScalarType<T[P], POIGroupByOutputType[P]>
        }
      >
    >


  export type POISelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnerId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadiusMeters?: boolean
    messages?: boolean | POI$messagesArgs<ExtArgs>
    partner?: boolean | POI$partnerArgs<ExtArgs>
    _count?: boolean | POICountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pOI"]>

  export type POISelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnerId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadiusMeters?: boolean
    partner?: boolean | POI$partnerArgs<ExtArgs>
  }, ExtArgs["result"]["pOI"]>

  export type POISelectScalar = {
    id?: boolean
    partnerId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    latitude?: boolean
    longitude?: boolean
    geofenceRadiusMeters?: boolean
  }

  export type POIInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | POI$messagesArgs<ExtArgs>
    partner?: boolean | POI$partnerArgs<ExtArgs>
    _count?: boolean | POICountOutputTypeDefaultArgs<ExtArgs>
  }
  export type POIIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partner?: boolean | POI$partnerArgs<ExtArgs>
  }

  export type $POIPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "POI"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      partner: Prisma.$PartnerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partnerId: string | null
      name: string
      description: string
      category: $Enums.POICategory
      latitude: number
      longitude: number
      geofenceRadiusMeters: number
    }, ExtArgs["result"]["pOI"]>
    composites: {}
  }

  type POIGetPayload<S extends boolean | null | undefined | POIDefaultArgs> = $Result.GetResult<Prisma.$POIPayload, S>

  type POICountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<POIFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: POICountAggregateInputType | true
    }

  export interface POIDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['POI'], meta: { name: 'POI' } }
    /**
     * Find zero or one POI that matches the filter.
     * @param {POIFindUniqueArgs} args - Arguments to find a POI
     * @example
     * // Get one POI
     * const pOI = await prisma.pOI.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends POIFindUniqueArgs>(args: SelectSubset<T, POIFindUniqueArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one POI that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {POIFindUniqueOrThrowArgs} args - Arguments to find a POI
     * @example
     * // Get one POI
     * const pOI = await prisma.pOI.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends POIFindUniqueOrThrowArgs>(args: SelectSubset<T, POIFindUniqueOrThrowArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first POI that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIFindFirstArgs} args - Arguments to find a POI
     * @example
     * // Get one POI
     * const pOI = await prisma.pOI.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends POIFindFirstArgs>(args?: SelectSubset<T, POIFindFirstArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first POI that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIFindFirstOrThrowArgs} args - Arguments to find a POI
     * @example
     * // Get one POI
     * const pOI = await prisma.pOI.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends POIFindFirstOrThrowArgs>(args?: SelectSubset<T, POIFindFirstOrThrowArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more POIS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all POIS
     * const pOIS = await prisma.pOI.findMany()
     * 
     * // Get first 10 POIS
     * const pOIS = await prisma.pOI.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pOIWithIdOnly = await prisma.pOI.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends POIFindManyArgs>(args?: SelectSubset<T, POIFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a POI.
     * @param {POICreateArgs} args - Arguments to create a POI.
     * @example
     * // Create one POI
     * const POI = await prisma.pOI.create({
     *   data: {
     *     // ... data to create a POI
     *   }
     * })
     * 
     */
    create<T extends POICreateArgs>(args: SelectSubset<T, POICreateArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many POIS.
     * @param {POICreateManyArgs} args - Arguments to create many POIS.
     * @example
     * // Create many POIS
     * const pOI = await prisma.pOI.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends POICreateManyArgs>(args?: SelectSubset<T, POICreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many POIS and returns the data saved in the database.
     * @param {POICreateManyAndReturnArgs} args - Arguments to create many POIS.
     * @example
     * // Create many POIS
     * const pOI = await prisma.pOI.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many POIS and only return the `id`
     * const pOIWithIdOnly = await prisma.pOI.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends POICreateManyAndReturnArgs>(args?: SelectSubset<T, POICreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a POI.
     * @param {POIDeleteArgs} args - Arguments to delete one POI.
     * @example
     * // Delete one POI
     * const POI = await prisma.pOI.delete({
     *   where: {
     *     // ... filter to delete one POI
     *   }
     * })
     * 
     */
    delete<T extends POIDeleteArgs>(args: SelectSubset<T, POIDeleteArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one POI.
     * @param {POIUpdateArgs} args - Arguments to update one POI.
     * @example
     * // Update one POI
     * const pOI = await prisma.pOI.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends POIUpdateArgs>(args: SelectSubset<T, POIUpdateArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more POIS.
     * @param {POIDeleteManyArgs} args - Arguments to filter POIS to delete.
     * @example
     * // Delete a few POIS
     * const { count } = await prisma.pOI.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends POIDeleteManyArgs>(args?: SelectSubset<T, POIDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more POIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many POIS
     * const pOI = await prisma.pOI.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends POIUpdateManyArgs>(args: SelectSubset<T, POIUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one POI.
     * @param {POIUpsertArgs} args - Arguments to update or create a POI.
     * @example
     * // Update or create a POI
     * const pOI = await prisma.pOI.upsert({
     *   create: {
     *     // ... data to create a POI
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the POI we want to update
     *   }
     * })
     */
    upsert<T extends POIUpsertArgs>(args: SelectSubset<T, POIUpsertArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of POIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POICountArgs} args - Arguments to filter POIS to count.
     * @example
     * // Count the number of POIS
     * const count = await prisma.pOI.count({
     *   where: {
     *     // ... the filter for the POIS we want to count
     *   }
     * })
    **/
    count<T extends POICountArgs>(
      args?: Subset<T, POICountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], POICountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a POI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends POIAggregateArgs>(args: Subset<T, POIAggregateArgs>): Prisma.PrismaPromise<GetPOIAggregateType<T>>

    /**
     * Group by POI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {POIGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends POIGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: POIGroupByArgs['orderBy'] }
        : { orderBy?: POIGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, POIGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPOIGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the POI model
   */
  readonly fields: POIFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for POI.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__POIClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends POI$messagesArgs<ExtArgs> = {}>(args?: Subset<T, POI$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    partner<T extends POI$partnerArgs<ExtArgs> = {}>(args?: Subset<T, POI$partnerArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the POI model
   */ 
  interface POIFieldRefs {
    readonly id: FieldRef<"POI", 'String'>
    readonly partnerId: FieldRef<"POI", 'String'>
    readonly name: FieldRef<"POI", 'String'>
    readonly description: FieldRef<"POI", 'String'>
    readonly category: FieldRef<"POI", 'POICategory'>
    readonly latitude: FieldRef<"POI", 'Float'>
    readonly longitude: FieldRef<"POI", 'Float'>
    readonly geofenceRadiusMeters: FieldRef<"POI", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * POI findUnique
   */
  export type POIFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter, which POI to fetch.
     */
    where: POIWhereUniqueInput
  }

  /**
   * POI findUniqueOrThrow
   */
  export type POIFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter, which POI to fetch.
     */
    where: POIWhereUniqueInput
  }

  /**
   * POI findFirst
   */
  export type POIFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter, which POI to fetch.
     */
    where?: POIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of POIS to fetch.
     */
    orderBy?: POIOrderByWithRelationInput | POIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for POIS.
     */
    cursor?: POIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` POIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` POIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of POIS.
     */
    distinct?: POIScalarFieldEnum | POIScalarFieldEnum[]
  }

  /**
   * POI findFirstOrThrow
   */
  export type POIFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter, which POI to fetch.
     */
    where?: POIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of POIS to fetch.
     */
    orderBy?: POIOrderByWithRelationInput | POIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for POIS.
     */
    cursor?: POIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` POIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` POIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of POIS.
     */
    distinct?: POIScalarFieldEnum | POIScalarFieldEnum[]
  }

  /**
   * POI findMany
   */
  export type POIFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter, which POIS to fetch.
     */
    where?: POIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of POIS to fetch.
     */
    orderBy?: POIOrderByWithRelationInput | POIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing POIS.
     */
    cursor?: POIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` POIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` POIS.
     */
    skip?: number
    distinct?: POIScalarFieldEnum | POIScalarFieldEnum[]
  }

  /**
   * POI create
   */
  export type POICreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * The data needed to create a POI.
     */
    data: XOR<POICreateInput, POIUncheckedCreateInput>
  }

  /**
   * POI createMany
   */
  export type POICreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many POIS.
     */
    data: POICreateManyInput | POICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * POI createManyAndReturn
   */
  export type POICreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many POIS.
     */
    data: POICreateManyInput | POICreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * POI update
   */
  export type POIUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * The data needed to update a POI.
     */
    data: XOR<POIUpdateInput, POIUncheckedUpdateInput>
    /**
     * Choose, which POI to update.
     */
    where: POIWhereUniqueInput
  }

  /**
   * POI updateMany
   */
  export type POIUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update POIS.
     */
    data: XOR<POIUpdateManyMutationInput, POIUncheckedUpdateManyInput>
    /**
     * Filter which POIS to update
     */
    where?: POIWhereInput
  }

  /**
   * POI upsert
   */
  export type POIUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * The filter to search for the POI to update in case it exists.
     */
    where: POIWhereUniqueInput
    /**
     * In case the POI found by the `where` argument doesn't exist, create a new POI with this data.
     */
    create: XOR<POICreateInput, POIUncheckedCreateInput>
    /**
     * In case the POI was found with the provided `where` argument, update it with this data.
     */
    update: XOR<POIUpdateInput, POIUncheckedUpdateInput>
  }

  /**
   * POI delete
   */
  export type POIDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
    /**
     * Filter which POI to delete.
     */
    where: POIWhereUniqueInput
  }

  /**
   * POI deleteMany
   */
  export type POIDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which POIS to delete
     */
    where?: POIWhereInput
  }

  /**
   * POI.messages
   */
  export type POI$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * POI.partner
   */
  export type POI$partnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    where?: PartnerWhereInput
  }

  /**
   * POI without action
   */
  export type POIDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the POI
     */
    select?: POISelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: POIInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    poiId: string | null
    hostId: string | null
    textContent: string | null
    pregeneratedAudioUrl: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    poiId: string | null
    hostId: string | null
    textContent: string | null
    pregeneratedAudioUrl: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    poiId: number
    hostId: number
    textContent: number
    pregeneratedAudioUrl: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    poiId?: true
    hostId?: true
    textContent?: true
    pregeneratedAudioUrl?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    poiId?: true
    hostId?: true
    textContent?: true
    pregeneratedAudioUrl?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    poiId?: true
    hostId?: true
    textContent?: true
    pregeneratedAudioUrl?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    poiId: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl: string | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poiId?: boolean
    hostId?: boolean
    textContent?: boolean
    pregeneratedAudioUrl?: boolean
    triggers?: boolean | Message$triggersArgs<ExtArgs>
    poi?: boolean | POIDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poiId?: boolean
    hostId?: boolean
    textContent?: boolean
    pregeneratedAudioUrl?: boolean
    poi?: boolean | POIDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    poiId?: boolean
    hostId?: boolean
    textContent?: boolean
    pregeneratedAudioUrl?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggers?: boolean | Message$triggersArgs<ExtArgs>
    poi?: boolean | POIDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poi?: boolean | POIDefaultArgs<ExtArgs>
    host?: boolean | HostProfileDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      triggers: Prisma.$TriggerPayload<ExtArgs>[]
      poi: Prisma.$POIPayload<ExtArgs>
      host: Prisma.$HostProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      poiId: string
      hostId: string
      textContent: string
      pregeneratedAudioUrl: string | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    triggers<T extends Message$triggersArgs<ExtArgs> = {}>(args?: Subset<T, Message$triggersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findMany"> | Null>
    poi<T extends POIDefaultArgs<ExtArgs> = {}>(args?: Subset<T, POIDefaultArgs<ExtArgs>>): Prisma__POIClient<$Result.GetResult<Prisma.$POIPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    host<T extends HostProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostProfileDefaultArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly poiId: FieldRef<"Message", 'String'>
    readonly hostId: FieldRef<"Message", 'String'>
    readonly textContent: FieldRef<"Message", 'String'>
    readonly pregeneratedAudioUrl: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.triggers
   */
  export type Message$triggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    where?: TriggerWhereInput
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    cursor?: TriggerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Trigger
   */

  export type AggregateTrigger = {
    _count: TriggerCountAggregateOutputType | null
    _avg: TriggerAvgAggregateOutputType | null
    _sum: TriggerSumAggregateOutputType | null
    _min: TriggerMinAggregateOutputType | null
    _max: TriggerMaxAggregateOutputType | null
  }

  export type TriggerAvgAggregateOutputType = {
    priority: number | null
  }

  export type TriggerSumAggregateOutputType = {
    priority: number | null
  }

  export type TriggerMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    priority: number | null
  }

  export type TriggerMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    priority: number | null
  }

  export type TriggerCountAggregateOutputType = {
    id: number
    messageId: number
    priority: number
    conditions: number
    _all: number
  }


  export type TriggerAvgAggregateInputType = {
    priority?: true
  }

  export type TriggerSumAggregateInputType = {
    priority?: true
  }

  export type TriggerMinAggregateInputType = {
    id?: true
    messageId?: true
    priority?: true
  }

  export type TriggerMaxAggregateInputType = {
    id?: true
    messageId?: true
    priority?: true
  }

  export type TriggerCountAggregateInputType = {
    id?: true
    messageId?: true
    priority?: true
    conditions?: true
    _all?: true
  }

  export type TriggerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trigger to aggregate.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Triggers
    **/
    _count?: true | TriggerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriggerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriggerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriggerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriggerMaxAggregateInputType
  }

  export type GetTriggerAggregateType<T extends TriggerAggregateArgs> = {
        [P in keyof T & keyof AggregateTrigger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrigger[P]>
      : GetScalarType<T[P], AggregateTrigger[P]>
  }




  export type TriggerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriggerWhereInput
    orderBy?: TriggerOrderByWithAggregationInput | TriggerOrderByWithAggregationInput[]
    by: TriggerScalarFieldEnum[] | TriggerScalarFieldEnum
    having?: TriggerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriggerCountAggregateInputType | true
    _avg?: TriggerAvgAggregateInputType
    _sum?: TriggerSumAggregateInputType
    _min?: TriggerMinAggregateInputType
    _max?: TriggerMaxAggregateInputType
  }

  export type TriggerGroupByOutputType = {
    id: string
    messageId: string
    priority: number
    conditions: JsonValue
    _count: TriggerCountAggregateOutputType | null
    _avg: TriggerAvgAggregateOutputType | null
    _sum: TriggerSumAggregateOutputType | null
    _min: TriggerMinAggregateOutputType | null
    _max: TriggerMaxAggregateOutputType | null
  }

  type GetTriggerGroupByPayload<T extends TriggerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TriggerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriggerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriggerGroupByOutputType[P]>
            : GetScalarType<T[P], TriggerGroupByOutputType[P]>
        }
      >
    >


  export type TriggerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    priority?: boolean
    conditions?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trigger"]>

  export type TriggerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    priority?: boolean
    conditions?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trigger"]>

  export type TriggerSelectScalar = {
    id?: boolean
    messageId?: boolean
    priority?: boolean
    conditions?: boolean
  }

  export type TriggerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type TriggerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $TriggerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trigger"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      priority: number
      conditions: Prisma.JsonValue
    }, ExtArgs["result"]["trigger"]>
    composites: {}
  }

  type TriggerGetPayload<S extends boolean | null | undefined | TriggerDefaultArgs> = $Result.GetResult<Prisma.$TriggerPayload, S>

  type TriggerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TriggerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TriggerCountAggregateInputType | true
    }

  export interface TriggerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trigger'], meta: { name: 'Trigger' } }
    /**
     * Find zero or one Trigger that matches the filter.
     * @param {TriggerFindUniqueArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TriggerFindUniqueArgs>(args: SelectSubset<T, TriggerFindUniqueArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trigger that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TriggerFindUniqueOrThrowArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TriggerFindUniqueOrThrowArgs>(args: SelectSubset<T, TriggerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trigger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindFirstArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TriggerFindFirstArgs>(args?: SelectSubset<T, TriggerFindFirstArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trigger that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindFirstOrThrowArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TriggerFindFirstOrThrowArgs>(args?: SelectSubset<T, TriggerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Triggers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Triggers
     * const triggers = await prisma.trigger.findMany()
     * 
     * // Get first 10 Triggers
     * const triggers = await prisma.trigger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triggerWithIdOnly = await prisma.trigger.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TriggerFindManyArgs>(args?: SelectSubset<T, TriggerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trigger.
     * @param {TriggerCreateArgs} args - Arguments to create a Trigger.
     * @example
     * // Create one Trigger
     * const Trigger = await prisma.trigger.create({
     *   data: {
     *     // ... data to create a Trigger
     *   }
     * })
     * 
     */
    create<T extends TriggerCreateArgs>(args: SelectSubset<T, TriggerCreateArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Triggers.
     * @param {TriggerCreateManyArgs} args - Arguments to create many Triggers.
     * @example
     * // Create many Triggers
     * const trigger = await prisma.trigger.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TriggerCreateManyArgs>(args?: SelectSubset<T, TriggerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Triggers and returns the data saved in the database.
     * @param {TriggerCreateManyAndReturnArgs} args - Arguments to create many Triggers.
     * @example
     * // Create many Triggers
     * const trigger = await prisma.trigger.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Triggers and only return the `id`
     * const triggerWithIdOnly = await prisma.trigger.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TriggerCreateManyAndReturnArgs>(args?: SelectSubset<T, TriggerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trigger.
     * @param {TriggerDeleteArgs} args - Arguments to delete one Trigger.
     * @example
     * // Delete one Trigger
     * const Trigger = await prisma.trigger.delete({
     *   where: {
     *     // ... filter to delete one Trigger
     *   }
     * })
     * 
     */
    delete<T extends TriggerDeleteArgs>(args: SelectSubset<T, TriggerDeleteArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trigger.
     * @param {TriggerUpdateArgs} args - Arguments to update one Trigger.
     * @example
     * // Update one Trigger
     * const trigger = await prisma.trigger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TriggerUpdateArgs>(args: SelectSubset<T, TriggerUpdateArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Triggers.
     * @param {TriggerDeleteManyArgs} args - Arguments to filter Triggers to delete.
     * @example
     * // Delete a few Triggers
     * const { count } = await prisma.trigger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TriggerDeleteManyArgs>(args?: SelectSubset<T, TriggerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Triggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Triggers
     * const trigger = await prisma.trigger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TriggerUpdateManyArgs>(args: SelectSubset<T, TriggerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trigger.
     * @param {TriggerUpsertArgs} args - Arguments to update or create a Trigger.
     * @example
     * // Update or create a Trigger
     * const trigger = await prisma.trigger.upsert({
     *   create: {
     *     // ... data to create a Trigger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trigger we want to update
     *   }
     * })
     */
    upsert<T extends TriggerUpsertArgs>(args: SelectSubset<T, TriggerUpsertArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Triggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerCountArgs} args - Arguments to filter Triggers to count.
     * @example
     * // Count the number of Triggers
     * const count = await prisma.trigger.count({
     *   where: {
     *     // ... the filter for the Triggers we want to count
     *   }
     * })
    **/
    count<T extends TriggerCountArgs>(
      args?: Subset<T, TriggerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriggerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriggerAggregateArgs>(args: Subset<T, TriggerAggregateArgs>): Prisma.PrismaPromise<GetTriggerAggregateType<T>>

    /**
     * Group by Trigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriggerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriggerGroupByArgs['orderBy'] }
        : { orderBy?: TriggerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriggerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriggerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trigger model
   */
  readonly fields: TriggerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trigger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TriggerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trigger model
   */ 
  interface TriggerFieldRefs {
    readonly id: FieldRef<"Trigger", 'String'>
    readonly messageId: FieldRef<"Trigger", 'String'>
    readonly priority: FieldRef<"Trigger", 'Int'>
    readonly conditions: FieldRef<"Trigger", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Trigger findUnique
   */
  export type TriggerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger findUniqueOrThrow
   */
  export type TriggerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger findFirst
   */
  export type TriggerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Triggers.
     */
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger findFirstOrThrow
   */
  export type TriggerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Triggers.
     */
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger findMany
   */
  export type TriggerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Triggers to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger create
   */
  export type TriggerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The data needed to create a Trigger.
     */
    data: XOR<TriggerCreateInput, TriggerUncheckedCreateInput>
  }

  /**
   * Trigger createMany
   */
  export type TriggerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Triggers.
     */
    data: TriggerCreateManyInput | TriggerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trigger createManyAndReturn
   */
  export type TriggerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Triggers.
     */
    data: TriggerCreateManyInput | TriggerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trigger update
   */
  export type TriggerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The data needed to update a Trigger.
     */
    data: XOR<TriggerUpdateInput, TriggerUncheckedUpdateInput>
    /**
     * Choose, which Trigger to update.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger updateMany
   */
  export type TriggerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Triggers.
     */
    data: XOR<TriggerUpdateManyMutationInput, TriggerUncheckedUpdateManyInput>
    /**
     * Filter which Triggers to update
     */
    where?: TriggerWhereInput
  }

  /**
   * Trigger upsert
   */
  export type TriggerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The filter to search for the Trigger to update in case it exists.
     */
    where: TriggerWhereUniqueInput
    /**
     * In case the Trigger found by the `where` argument doesn't exist, create a new Trigger with this data.
     */
    create: XOR<TriggerCreateInput, TriggerUncheckedCreateInput>
    /**
     * In case the Trigger was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriggerUpdateInput, TriggerUncheckedUpdateInput>
  }

  /**
   * Trigger delete
   */
  export type TriggerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter which Trigger to delete.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger deleteMany
   */
  export type TriggerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Triggers to delete
     */
    where?: TriggerWhereInput
  }

  /**
   * Trigger without action
   */
  export type TriggerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
  }


  /**
   * Model HostProfile
   */

  export type AggregateHostProfile = {
    _count: HostProfileCountAggregateOutputType | null
    _min: HostProfileMinAggregateOutputType | null
    _max: HostProfileMaxAggregateOutputType | null
  }

  export type HostProfileMinAggregateOutputType = {
    id: string | null
    name: string | null
    personaType: $Enums.HostPersonaType | null
    description: string | null
    ttsService: $Enums.TTSService | null
    ttsVoiceId: string | null
  }

  export type HostProfileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    personaType: $Enums.HostPersonaType | null
    description: string | null
    ttsService: $Enums.TTSService | null
    ttsVoiceId: string | null
  }

  export type HostProfileCountAggregateOutputType = {
    id: number
    name: number
    personaType: number
    description: number
    ttsService: number
    ttsVoiceId: number
    _all: number
  }


  export type HostProfileMinAggregateInputType = {
    id?: true
    name?: true
    personaType?: true
    description?: true
    ttsService?: true
    ttsVoiceId?: true
  }

  export type HostProfileMaxAggregateInputType = {
    id?: true
    name?: true
    personaType?: true
    description?: true
    ttsService?: true
    ttsVoiceId?: true
  }

  export type HostProfileCountAggregateInputType = {
    id?: true
    name?: true
    personaType?: true
    description?: true
    ttsService?: true
    ttsVoiceId?: true
    _all?: true
  }

  export type HostProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostProfile to aggregate.
     */
    where?: HostProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostProfiles to fetch.
     */
    orderBy?: HostProfileOrderByWithRelationInput | HostProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostProfiles
    **/
    _count?: true | HostProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostProfileMaxAggregateInputType
  }

  export type GetHostProfileAggregateType<T extends HostProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateHostProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostProfile[P]>
      : GetScalarType<T[P], AggregateHostProfile[P]>
  }




  export type HostProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostProfileWhereInput
    orderBy?: HostProfileOrderByWithAggregationInput | HostProfileOrderByWithAggregationInput[]
    by: HostProfileScalarFieldEnum[] | HostProfileScalarFieldEnum
    having?: HostProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostProfileCountAggregateInputType | true
    _min?: HostProfileMinAggregateInputType
    _max?: HostProfileMaxAggregateInputType
  }

  export type HostProfileGroupByOutputType = {
    id: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    _count: HostProfileCountAggregateOutputType | null
    _min: HostProfileMinAggregateOutputType | null
    _max: HostProfileMaxAggregateOutputType | null
  }

  type GetHostProfileGroupByPayload<T extends HostProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostProfileGroupByOutputType[P]>
            : GetScalarType<T[P], HostProfileGroupByOutputType[P]>
        }
      >
    >


  export type HostProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    personaType?: boolean
    description?: boolean
    ttsService?: boolean
    ttsVoiceId?: boolean
    trips?: boolean | HostProfile$tripsArgs<ExtArgs>
    messages?: boolean | HostProfile$messagesArgs<ExtArgs>
    audioPacks?: boolean | HostProfile$audioPacksArgs<ExtArgs>
    _count?: boolean | HostProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostProfile"]>

  export type HostProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    personaType?: boolean
    description?: boolean
    ttsService?: boolean
    ttsVoiceId?: boolean
  }, ExtArgs["result"]["hostProfile"]>

  export type HostProfileSelectScalar = {
    id?: boolean
    name?: boolean
    personaType?: boolean
    description?: boolean
    ttsService?: boolean
    ttsVoiceId?: boolean
  }

  export type HostProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trips?: boolean | HostProfile$tripsArgs<ExtArgs>
    messages?: boolean | HostProfile$messagesArgs<ExtArgs>
    audioPacks?: boolean | HostProfile$audioPacksArgs<ExtArgs>
    _count?: boolean | HostProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HostProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HostProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostProfile"
    objects: {
      trips: Prisma.$TripPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      audioPacks: Prisma.$AudioPackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      personaType: $Enums.HostPersonaType
      description: string
      ttsService: $Enums.TTSService
      ttsVoiceId: string
    }, ExtArgs["result"]["hostProfile"]>
    composites: {}
  }

  type HostProfileGetPayload<S extends boolean | null | undefined | HostProfileDefaultArgs> = $Result.GetResult<Prisma.$HostProfilePayload, S>

  type HostProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HostProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HostProfileCountAggregateInputType | true
    }

  export interface HostProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostProfile'], meta: { name: 'HostProfile' } }
    /**
     * Find zero or one HostProfile that matches the filter.
     * @param {HostProfileFindUniqueArgs} args - Arguments to find a HostProfile
     * @example
     * // Get one HostProfile
     * const hostProfile = await prisma.hostProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostProfileFindUniqueArgs>(args: SelectSubset<T, HostProfileFindUniqueArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HostProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HostProfileFindUniqueOrThrowArgs} args - Arguments to find a HostProfile
     * @example
     * // Get one HostProfile
     * const hostProfile = await prisma.hostProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, HostProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HostProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileFindFirstArgs} args - Arguments to find a HostProfile
     * @example
     * // Get one HostProfile
     * const hostProfile = await prisma.hostProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostProfileFindFirstArgs>(args?: SelectSubset<T, HostProfileFindFirstArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HostProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileFindFirstOrThrowArgs} args - Arguments to find a HostProfile
     * @example
     * // Get one HostProfile
     * const hostProfile = await prisma.hostProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, HostProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HostProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostProfiles
     * const hostProfiles = await prisma.hostProfile.findMany()
     * 
     * // Get first 10 HostProfiles
     * const hostProfiles = await prisma.hostProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostProfileWithIdOnly = await prisma.hostProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostProfileFindManyArgs>(args?: SelectSubset<T, HostProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HostProfile.
     * @param {HostProfileCreateArgs} args - Arguments to create a HostProfile.
     * @example
     * // Create one HostProfile
     * const HostProfile = await prisma.hostProfile.create({
     *   data: {
     *     // ... data to create a HostProfile
     *   }
     * })
     * 
     */
    create<T extends HostProfileCreateArgs>(args: SelectSubset<T, HostProfileCreateArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HostProfiles.
     * @param {HostProfileCreateManyArgs} args - Arguments to create many HostProfiles.
     * @example
     * // Create many HostProfiles
     * const hostProfile = await prisma.hostProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostProfileCreateManyArgs>(args?: SelectSubset<T, HostProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostProfiles and returns the data saved in the database.
     * @param {HostProfileCreateManyAndReturnArgs} args - Arguments to create many HostProfiles.
     * @example
     * // Create many HostProfiles
     * const hostProfile = await prisma.hostProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostProfiles and only return the `id`
     * const hostProfileWithIdOnly = await prisma.hostProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, HostProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HostProfile.
     * @param {HostProfileDeleteArgs} args - Arguments to delete one HostProfile.
     * @example
     * // Delete one HostProfile
     * const HostProfile = await prisma.hostProfile.delete({
     *   where: {
     *     // ... filter to delete one HostProfile
     *   }
     * })
     * 
     */
    delete<T extends HostProfileDeleteArgs>(args: SelectSubset<T, HostProfileDeleteArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HostProfile.
     * @param {HostProfileUpdateArgs} args - Arguments to update one HostProfile.
     * @example
     * // Update one HostProfile
     * const hostProfile = await prisma.hostProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostProfileUpdateArgs>(args: SelectSubset<T, HostProfileUpdateArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HostProfiles.
     * @param {HostProfileDeleteManyArgs} args - Arguments to filter HostProfiles to delete.
     * @example
     * // Delete a few HostProfiles
     * const { count } = await prisma.hostProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostProfileDeleteManyArgs>(args?: SelectSubset<T, HostProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostProfiles
     * const hostProfile = await prisma.hostProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostProfileUpdateManyArgs>(args: SelectSubset<T, HostProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HostProfile.
     * @param {HostProfileUpsertArgs} args - Arguments to update or create a HostProfile.
     * @example
     * // Update or create a HostProfile
     * const hostProfile = await prisma.hostProfile.upsert({
     *   create: {
     *     // ... data to create a HostProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostProfile we want to update
     *   }
     * })
     */
    upsert<T extends HostProfileUpsertArgs>(args: SelectSubset<T, HostProfileUpsertArgs<ExtArgs>>): Prisma__HostProfileClient<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HostProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileCountArgs} args - Arguments to filter HostProfiles to count.
     * @example
     * // Count the number of HostProfiles
     * const count = await prisma.hostProfile.count({
     *   where: {
     *     // ... the filter for the HostProfiles we want to count
     *   }
     * })
    **/
    count<T extends HostProfileCountArgs>(
      args?: Subset<T, HostProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostProfileAggregateArgs>(args: Subset<T, HostProfileAggregateArgs>): Prisma.PrismaPromise<GetHostProfileAggregateType<T>>

    /**
     * Group by HostProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostProfileGroupByArgs['orderBy'] }
        : { orderBy?: HostProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostProfile model
   */
  readonly fields: HostProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trips<T extends HostProfile$tripsArgs<ExtArgs> = {}>(args?: Subset<T, HostProfile$tripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends HostProfile$messagesArgs<ExtArgs> = {}>(args?: Subset<T, HostProfile$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    audioPacks<T extends HostProfile$audioPacksArgs<ExtArgs> = {}>(args?: Subset<T, HostProfile$audioPacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostProfile model
   */ 
  interface HostProfileFieldRefs {
    readonly id: FieldRef<"HostProfile", 'String'>
    readonly name: FieldRef<"HostProfile", 'String'>
    readonly personaType: FieldRef<"HostProfile", 'HostPersonaType'>
    readonly description: FieldRef<"HostProfile", 'String'>
    readonly ttsService: FieldRef<"HostProfile", 'TTSService'>
    readonly ttsVoiceId: FieldRef<"HostProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HostProfile findUnique
   */
  export type HostProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter, which HostProfile to fetch.
     */
    where: HostProfileWhereUniqueInput
  }

  /**
   * HostProfile findUniqueOrThrow
   */
  export type HostProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter, which HostProfile to fetch.
     */
    where: HostProfileWhereUniqueInput
  }

  /**
   * HostProfile findFirst
   */
  export type HostProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter, which HostProfile to fetch.
     */
    where?: HostProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostProfiles to fetch.
     */
    orderBy?: HostProfileOrderByWithRelationInput | HostProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostProfiles.
     */
    cursor?: HostProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostProfiles.
     */
    distinct?: HostProfileScalarFieldEnum | HostProfileScalarFieldEnum[]
  }

  /**
   * HostProfile findFirstOrThrow
   */
  export type HostProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter, which HostProfile to fetch.
     */
    where?: HostProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostProfiles to fetch.
     */
    orderBy?: HostProfileOrderByWithRelationInput | HostProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostProfiles.
     */
    cursor?: HostProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostProfiles.
     */
    distinct?: HostProfileScalarFieldEnum | HostProfileScalarFieldEnum[]
  }

  /**
   * HostProfile findMany
   */
  export type HostProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter, which HostProfiles to fetch.
     */
    where?: HostProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostProfiles to fetch.
     */
    orderBy?: HostProfileOrderByWithRelationInput | HostProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostProfiles.
     */
    cursor?: HostProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostProfiles.
     */
    skip?: number
    distinct?: HostProfileScalarFieldEnum | HostProfileScalarFieldEnum[]
  }

  /**
   * HostProfile create
   */
  export type HostProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a HostProfile.
     */
    data: XOR<HostProfileCreateInput, HostProfileUncheckedCreateInput>
  }

  /**
   * HostProfile createMany
   */
  export type HostProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostProfiles.
     */
    data: HostProfileCreateManyInput | HostProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostProfile createManyAndReturn
   */
  export type HostProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HostProfiles.
     */
    data: HostProfileCreateManyInput | HostProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostProfile update
   */
  export type HostProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a HostProfile.
     */
    data: XOR<HostProfileUpdateInput, HostProfileUncheckedUpdateInput>
    /**
     * Choose, which HostProfile to update.
     */
    where: HostProfileWhereUniqueInput
  }

  /**
   * HostProfile updateMany
   */
  export type HostProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostProfiles.
     */
    data: XOR<HostProfileUpdateManyMutationInput, HostProfileUncheckedUpdateManyInput>
    /**
     * Filter which HostProfiles to update
     */
    where?: HostProfileWhereInput
  }

  /**
   * HostProfile upsert
   */
  export type HostProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the HostProfile to update in case it exists.
     */
    where: HostProfileWhereUniqueInput
    /**
     * In case the HostProfile found by the `where` argument doesn't exist, create a new HostProfile with this data.
     */
    create: XOR<HostProfileCreateInput, HostProfileUncheckedCreateInput>
    /**
     * In case the HostProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostProfileUpdateInput, HostProfileUncheckedUpdateInput>
  }

  /**
   * HostProfile delete
   */
  export type HostProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    /**
     * Filter which HostProfile to delete.
     */
    where: HostProfileWhereUniqueInput
  }

  /**
   * HostProfile deleteMany
   */
  export type HostProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostProfiles to delete
     */
    where?: HostProfileWhereInput
  }

  /**
   * HostProfile.trips
   */
  export type HostProfile$tripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trip
     */
    select?: TripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TripInclude<ExtArgs> | null
    where?: TripWhereInput
    orderBy?: TripOrderByWithRelationInput | TripOrderByWithRelationInput[]
    cursor?: TripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }

  /**
   * HostProfile.messages
   */
  export type HostProfile$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * HostProfile.audioPacks
   */
  export type HostProfile$audioPacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    where?: AudioPackWhereInput
    orderBy?: AudioPackOrderByWithRelationInput | AudioPackOrderByWithRelationInput[]
    cursor?: AudioPackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AudioPackScalarFieldEnum | AudioPackScalarFieldEnum[]
  }

  /**
   * HostProfile without action
   */
  export type HostProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
  }


  /**
   * Model AudioPack
   */

  export type AggregateAudioPack = {
    _count: AudioPackCountAggregateOutputType | null
    _min: AudioPackMinAggregateOutputType | null
    _max: AudioPackMaxAggregateOutputType | null
  }

  export type AudioPackMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    musicThemeId: string | null
  }

  export type AudioPackMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    musicThemeId: string | null
  }

  export type AudioPackCountAggregateOutputType = {
    id: number
    name: number
    description: number
    musicThemeId: number
    _all: number
  }


  export type AudioPackMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    musicThemeId?: true
  }

  export type AudioPackMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    musicThemeId?: true
  }

  export type AudioPackCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    musicThemeId?: true
    _all?: true
  }

  export type AudioPackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AudioPack to aggregate.
     */
    where?: AudioPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioPacks to fetch.
     */
    orderBy?: AudioPackOrderByWithRelationInput | AudioPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AudioPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AudioPacks
    **/
    _count?: true | AudioPackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AudioPackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AudioPackMaxAggregateInputType
  }

  export type GetAudioPackAggregateType<T extends AudioPackAggregateArgs> = {
        [P in keyof T & keyof AggregateAudioPack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudioPack[P]>
      : GetScalarType<T[P], AggregateAudioPack[P]>
  }




  export type AudioPackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioPackWhereInput
    orderBy?: AudioPackOrderByWithAggregationInput | AudioPackOrderByWithAggregationInput[]
    by: AudioPackScalarFieldEnum[] | AudioPackScalarFieldEnum
    having?: AudioPackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AudioPackCountAggregateInputType | true
    _min?: AudioPackMinAggregateInputType
    _max?: AudioPackMaxAggregateInputType
  }

  export type AudioPackGroupByOutputType = {
    id: string
    name: string
    description: string
    musicThemeId: string
    _count: AudioPackCountAggregateOutputType | null
    _min: AudioPackMinAggregateOutputType | null
    _max: AudioPackMaxAggregateOutputType | null
  }

  type GetAudioPackGroupByPayload<T extends AudioPackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AudioPackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AudioPackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AudioPackGroupByOutputType[P]>
            : GetScalarType<T[P], AudioPackGroupByOutputType[P]>
        }
      >
    >


  export type AudioPackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    musicThemeId?: boolean
    hosts?: boolean | AudioPack$hostsArgs<ExtArgs>
    _count?: boolean | AudioPackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["audioPack"]>

  export type AudioPackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    musicThemeId?: boolean
  }, ExtArgs["result"]["audioPack"]>

  export type AudioPackSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    musicThemeId?: boolean
  }

  export type AudioPackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hosts?: boolean | AudioPack$hostsArgs<ExtArgs>
    _count?: boolean | AudioPackCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AudioPackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AudioPackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AudioPack"
    objects: {
      hosts: Prisma.$HostProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      musicThemeId: string
    }, ExtArgs["result"]["audioPack"]>
    composites: {}
  }

  type AudioPackGetPayload<S extends boolean | null | undefined | AudioPackDefaultArgs> = $Result.GetResult<Prisma.$AudioPackPayload, S>

  type AudioPackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AudioPackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AudioPackCountAggregateInputType | true
    }

  export interface AudioPackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AudioPack'], meta: { name: 'AudioPack' } }
    /**
     * Find zero or one AudioPack that matches the filter.
     * @param {AudioPackFindUniqueArgs} args - Arguments to find a AudioPack
     * @example
     * // Get one AudioPack
     * const audioPack = await prisma.audioPack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AudioPackFindUniqueArgs>(args: SelectSubset<T, AudioPackFindUniqueArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AudioPack that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AudioPackFindUniqueOrThrowArgs} args - Arguments to find a AudioPack
     * @example
     * // Get one AudioPack
     * const audioPack = await prisma.audioPack.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AudioPackFindUniqueOrThrowArgs>(args: SelectSubset<T, AudioPackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AudioPack that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackFindFirstArgs} args - Arguments to find a AudioPack
     * @example
     * // Get one AudioPack
     * const audioPack = await prisma.audioPack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AudioPackFindFirstArgs>(args?: SelectSubset<T, AudioPackFindFirstArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AudioPack that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackFindFirstOrThrowArgs} args - Arguments to find a AudioPack
     * @example
     * // Get one AudioPack
     * const audioPack = await prisma.audioPack.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AudioPackFindFirstOrThrowArgs>(args?: SelectSubset<T, AudioPackFindFirstOrThrowArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AudioPacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AudioPacks
     * const audioPacks = await prisma.audioPack.findMany()
     * 
     * // Get first 10 AudioPacks
     * const audioPacks = await prisma.audioPack.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const audioPackWithIdOnly = await prisma.audioPack.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AudioPackFindManyArgs>(args?: SelectSubset<T, AudioPackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AudioPack.
     * @param {AudioPackCreateArgs} args - Arguments to create a AudioPack.
     * @example
     * // Create one AudioPack
     * const AudioPack = await prisma.audioPack.create({
     *   data: {
     *     // ... data to create a AudioPack
     *   }
     * })
     * 
     */
    create<T extends AudioPackCreateArgs>(args: SelectSubset<T, AudioPackCreateArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AudioPacks.
     * @param {AudioPackCreateManyArgs} args - Arguments to create many AudioPacks.
     * @example
     * // Create many AudioPacks
     * const audioPack = await prisma.audioPack.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AudioPackCreateManyArgs>(args?: SelectSubset<T, AudioPackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AudioPacks and returns the data saved in the database.
     * @param {AudioPackCreateManyAndReturnArgs} args - Arguments to create many AudioPacks.
     * @example
     * // Create many AudioPacks
     * const audioPack = await prisma.audioPack.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AudioPacks and only return the `id`
     * const audioPackWithIdOnly = await prisma.audioPack.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AudioPackCreateManyAndReturnArgs>(args?: SelectSubset<T, AudioPackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AudioPack.
     * @param {AudioPackDeleteArgs} args - Arguments to delete one AudioPack.
     * @example
     * // Delete one AudioPack
     * const AudioPack = await prisma.audioPack.delete({
     *   where: {
     *     // ... filter to delete one AudioPack
     *   }
     * })
     * 
     */
    delete<T extends AudioPackDeleteArgs>(args: SelectSubset<T, AudioPackDeleteArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AudioPack.
     * @param {AudioPackUpdateArgs} args - Arguments to update one AudioPack.
     * @example
     * // Update one AudioPack
     * const audioPack = await prisma.audioPack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AudioPackUpdateArgs>(args: SelectSubset<T, AudioPackUpdateArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AudioPacks.
     * @param {AudioPackDeleteManyArgs} args - Arguments to filter AudioPacks to delete.
     * @example
     * // Delete a few AudioPacks
     * const { count } = await prisma.audioPack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AudioPackDeleteManyArgs>(args?: SelectSubset<T, AudioPackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AudioPacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AudioPacks
     * const audioPack = await prisma.audioPack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AudioPackUpdateManyArgs>(args: SelectSubset<T, AudioPackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AudioPack.
     * @param {AudioPackUpsertArgs} args - Arguments to update or create a AudioPack.
     * @example
     * // Update or create a AudioPack
     * const audioPack = await prisma.audioPack.upsert({
     *   create: {
     *     // ... data to create a AudioPack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AudioPack we want to update
     *   }
     * })
     */
    upsert<T extends AudioPackUpsertArgs>(args: SelectSubset<T, AudioPackUpsertArgs<ExtArgs>>): Prisma__AudioPackClient<$Result.GetResult<Prisma.$AudioPackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AudioPacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackCountArgs} args - Arguments to filter AudioPacks to count.
     * @example
     * // Count the number of AudioPacks
     * const count = await prisma.audioPack.count({
     *   where: {
     *     // ... the filter for the AudioPacks we want to count
     *   }
     * })
    **/
    count<T extends AudioPackCountArgs>(
      args?: Subset<T, AudioPackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AudioPackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AudioPack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AudioPackAggregateArgs>(args: Subset<T, AudioPackAggregateArgs>): Prisma.PrismaPromise<GetAudioPackAggregateType<T>>

    /**
     * Group by AudioPack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioPackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AudioPackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AudioPackGroupByArgs['orderBy'] }
        : { orderBy?: AudioPackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AudioPackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudioPackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AudioPack model
   */
  readonly fields: AudioPackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AudioPack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AudioPackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hosts<T extends AudioPack$hostsArgs<ExtArgs> = {}>(args?: Subset<T, AudioPack$hostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostProfilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AudioPack model
   */ 
  interface AudioPackFieldRefs {
    readonly id: FieldRef<"AudioPack", 'String'>
    readonly name: FieldRef<"AudioPack", 'String'>
    readonly description: FieldRef<"AudioPack", 'String'>
    readonly musicThemeId: FieldRef<"AudioPack", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AudioPack findUnique
   */
  export type AudioPackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter, which AudioPack to fetch.
     */
    where: AudioPackWhereUniqueInput
  }

  /**
   * AudioPack findUniqueOrThrow
   */
  export type AudioPackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter, which AudioPack to fetch.
     */
    where: AudioPackWhereUniqueInput
  }

  /**
   * AudioPack findFirst
   */
  export type AudioPackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter, which AudioPack to fetch.
     */
    where?: AudioPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioPacks to fetch.
     */
    orderBy?: AudioPackOrderByWithRelationInput | AudioPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AudioPacks.
     */
    cursor?: AudioPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AudioPacks.
     */
    distinct?: AudioPackScalarFieldEnum | AudioPackScalarFieldEnum[]
  }

  /**
   * AudioPack findFirstOrThrow
   */
  export type AudioPackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter, which AudioPack to fetch.
     */
    where?: AudioPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioPacks to fetch.
     */
    orderBy?: AudioPackOrderByWithRelationInput | AudioPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AudioPacks.
     */
    cursor?: AudioPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AudioPacks.
     */
    distinct?: AudioPackScalarFieldEnum | AudioPackScalarFieldEnum[]
  }

  /**
   * AudioPack findMany
   */
  export type AudioPackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter, which AudioPacks to fetch.
     */
    where?: AudioPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioPacks to fetch.
     */
    orderBy?: AudioPackOrderByWithRelationInput | AudioPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AudioPacks.
     */
    cursor?: AudioPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioPacks.
     */
    skip?: number
    distinct?: AudioPackScalarFieldEnum | AudioPackScalarFieldEnum[]
  }

  /**
   * AudioPack create
   */
  export type AudioPackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * The data needed to create a AudioPack.
     */
    data: XOR<AudioPackCreateInput, AudioPackUncheckedCreateInput>
  }

  /**
   * AudioPack createMany
   */
  export type AudioPackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AudioPacks.
     */
    data: AudioPackCreateManyInput | AudioPackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AudioPack createManyAndReturn
   */
  export type AudioPackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AudioPacks.
     */
    data: AudioPackCreateManyInput | AudioPackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AudioPack update
   */
  export type AudioPackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * The data needed to update a AudioPack.
     */
    data: XOR<AudioPackUpdateInput, AudioPackUncheckedUpdateInput>
    /**
     * Choose, which AudioPack to update.
     */
    where: AudioPackWhereUniqueInput
  }

  /**
   * AudioPack updateMany
   */
  export type AudioPackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AudioPacks.
     */
    data: XOR<AudioPackUpdateManyMutationInput, AudioPackUncheckedUpdateManyInput>
    /**
     * Filter which AudioPacks to update
     */
    where?: AudioPackWhereInput
  }

  /**
   * AudioPack upsert
   */
  export type AudioPackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * The filter to search for the AudioPack to update in case it exists.
     */
    where: AudioPackWhereUniqueInput
    /**
     * In case the AudioPack found by the `where` argument doesn't exist, create a new AudioPack with this data.
     */
    create: XOR<AudioPackCreateInput, AudioPackUncheckedCreateInput>
    /**
     * In case the AudioPack was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AudioPackUpdateInput, AudioPackUncheckedUpdateInput>
  }

  /**
   * AudioPack delete
   */
  export type AudioPackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
    /**
     * Filter which AudioPack to delete.
     */
    where: AudioPackWhereUniqueInput
  }

  /**
   * AudioPack deleteMany
   */
  export type AudioPackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AudioPacks to delete
     */
    where?: AudioPackWhereInput
  }

  /**
   * AudioPack.hosts
   */
  export type AudioPack$hostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostProfile
     */
    select?: HostProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostProfileInclude<ExtArgs> | null
    where?: HostProfileWhereInput
    orderBy?: HostProfileOrderByWithRelationInput | HostProfileOrderByWithRelationInput[]
    cursor?: HostProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostProfileScalarFieldEnum | HostProfileScalarFieldEnum[]
  }

  /**
   * AudioPack without action
   */
  export type AudioPackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioPack
     */
    select?: AudioPackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioPackInclude<ExtArgs> | null
  }


  /**
   * Model BanterEvent
   */

  export type AggregateBanterEvent = {
    _count: BanterEventCountAggregateOutputType | null
    _min: BanterEventMinAggregateOutputType | null
    _max: BanterEventMaxAggregateOutputType | null
  }

  export type BanterEventMinAggregateOutputType = {
    id: string | null
    triggeringContext: $Enums.BanterEventContext | null
    hostLine: string | null
    navigatorLine: string | null
  }

  export type BanterEventMaxAggregateOutputType = {
    id: string | null
    triggeringContext: $Enums.BanterEventContext | null
    hostLine: string | null
    navigatorLine: string | null
  }

  export type BanterEventCountAggregateOutputType = {
    id: number
    triggeringContext: number
    hostLine: number
    navigatorLine: number
    _all: number
  }


  export type BanterEventMinAggregateInputType = {
    id?: true
    triggeringContext?: true
    hostLine?: true
    navigatorLine?: true
  }

  export type BanterEventMaxAggregateInputType = {
    id?: true
    triggeringContext?: true
    hostLine?: true
    navigatorLine?: true
  }

  export type BanterEventCountAggregateInputType = {
    id?: true
    triggeringContext?: true
    hostLine?: true
    navigatorLine?: true
    _all?: true
  }

  export type BanterEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BanterEvent to aggregate.
     */
    where?: BanterEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanterEvents to fetch.
     */
    orderBy?: BanterEventOrderByWithRelationInput | BanterEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BanterEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanterEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanterEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BanterEvents
    **/
    _count?: true | BanterEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BanterEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BanterEventMaxAggregateInputType
  }

  export type GetBanterEventAggregateType<T extends BanterEventAggregateArgs> = {
        [P in keyof T & keyof AggregateBanterEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanterEvent[P]>
      : GetScalarType<T[P], AggregateBanterEvent[P]>
  }




  export type BanterEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanterEventWhereInput
    orderBy?: BanterEventOrderByWithAggregationInput | BanterEventOrderByWithAggregationInput[]
    by: BanterEventScalarFieldEnum[] | BanterEventScalarFieldEnum
    having?: BanterEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BanterEventCountAggregateInputType | true
    _min?: BanterEventMinAggregateInputType
    _max?: BanterEventMaxAggregateInputType
  }

  export type BanterEventGroupByOutputType = {
    id: string
    triggeringContext: $Enums.BanterEventContext
    hostLine: string
    navigatorLine: string
    _count: BanterEventCountAggregateOutputType | null
    _min: BanterEventMinAggregateOutputType | null
    _max: BanterEventMaxAggregateOutputType | null
  }

  type GetBanterEventGroupByPayload<T extends BanterEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BanterEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BanterEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BanterEventGroupByOutputType[P]>
            : GetScalarType<T[P], BanterEventGroupByOutputType[P]>
        }
      >
    >


  export type BanterEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    triggeringContext?: boolean
    hostLine?: boolean
    navigatorLine?: boolean
  }, ExtArgs["result"]["banterEvent"]>

  export type BanterEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    triggeringContext?: boolean
    hostLine?: boolean
    navigatorLine?: boolean
  }, ExtArgs["result"]["banterEvent"]>

  export type BanterEventSelectScalar = {
    id?: boolean
    triggeringContext?: boolean
    hostLine?: boolean
    navigatorLine?: boolean
  }


  export type $BanterEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BanterEvent"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      triggeringContext: $Enums.BanterEventContext
      hostLine: string
      navigatorLine: string
    }, ExtArgs["result"]["banterEvent"]>
    composites: {}
  }

  type BanterEventGetPayload<S extends boolean | null | undefined | BanterEventDefaultArgs> = $Result.GetResult<Prisma.$BanterEventPayload, S>

  type BanterEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BanterEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BanterEventCountAggregateInputType | true
    }

  export interface BanterEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BanterEvent'], meta: { name: 'BanterEvent' } }
    /**
     * Find zero or one BanterEvent that matches the filter.
     * @param {BanterEventFindUniqueArgs} args - Arguments to find a BanterEvent
     * @example
     * // Get one BanterEvent
     * const banterEvent = await prisma.banterEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BanterEventFindUniqueArgs>(args: SelectSubset<T, BanterEventFindUniqueArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BanterEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BanterEventFindUniqueOrThrowArgs} args - Arguments to find a BanterEvent
     * @example
     * // Get one BanterEvent
     * const banterEvent = await prisma.banterEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BanterEventFindUniqueOrThrowArgs>(args: SelectSubset<T, BanterEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BanterEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventFindFirstArgs} args - Arguments to find a BanterEvent
     * @example
     * // Get one BanterEvent
     * const banterEvent = await prisma.banterEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BanterEventFindFirstArgs>(args?: SelectSubset<T, BanterEventFindFirstArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BanterEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventFindFirstOrThrowArgs} args - Arguments to find a BanterEvent
     * @example
     * // Get one BanterEvent
     * const banterEvent = await prisma.banterEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BanterEventFindFirstOrThrowArgs>(args?: SelectSubset<T, BanterEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BanterEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BanterEvents
     * const banterEvents = await prisma.banterEvent.findMany()
     * 
     * // Get first 10 BanterEvents
     * const banterEvents = await prisma.banterEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const banterEventWithIdOnly = await prisma.banterEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BanterEventFindManyArgs>(args?: SelectSubset<T, BanterEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BanterEvent.
     * @param {BanterEventCreateArgs} args - Arguments to create a BanterEvent.
     * @example
     * // Create one BanterEvent
     * const BanterEvent = await prisma.banterEvent.create({
     *   data: {
     *     // ... data to create a BanterEvent
     *   }
     * })
     * 
     */
    create<T extends BanterEventCreateArgs>(args: SelectSubset<T, BanterEventCreateArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BanterEvents.
     * @param {BanterEventCreateManyArgs} args - Arguments to create many BanterEvents.
     * @example
     * // Create many BanterEvents
     * const banterEvent = await prisma.banterEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BanterEventCreateManyArgs>(args?: SelectSubset<T, BanterEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BanterEvents and returns the data saved in the database.
     * @param {BanterEventCreateManyAndReturnArgs} args - Arguments to create many BanterEvents.
     * @example
     * // Create many BanterEvents
     * const banterEvent = await prisma.banterEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BanterEvents and only return the `id`
     * const banterEventWithIdOnly = await prisma.banterEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BanterEventCreateManyAndReturnArgs>(args?: SelectSubset<T, BanterEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BanterEvent.
     * @param {BanterEventDeleteArgs} args - Arguments to delete one BanterEvent.
     * @example
     * // Delete one BanterEvent
     * const BanterEvent = await prisma.banterEvent.delete({
     *   where: {
     *     // ... filter to delete one BanterEvent
     *   }
     * })
     * 
     */
    delete<T extends BanterEventDeleteArgs>(args: SelectSubset<T, BanterEventDeleteArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BanterEvent.
     * @param {BanterEventUpdateArgs} args - Arguments to update one BanterEvent.
     * @example
     * // Update one BanterEvent
     * const banterEvent = await prisma.banterEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BanterEventUpdateArgs>(args: SelectSubset<T, BanterEventUpdateArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BanterEvents.
     * @param {BanterEventDeleteManyArgs} args - Arguments to filter BanterEvents to delete.
     * @example
     * // Delete a few BanterEvents
     * const { count } = await prisma.banterEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BanterEventDeleteManyArgs>(args?: SelectSubset<T, BanterEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BanterEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BanterEvents
     * const banterEvent = await prisma.banterEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BanterEventUpdateManyArgs>(args: SelectSubset<T, BanterEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BanterEvent.
     * @param {BanterEventUpsertArgs} args - Arguments to update or create a BanterEvent.
     * @example
     * // Update or create a BanterEvent
     * const banterEvent = await prisma.banterEvent.upsert({
     *   create: {
     *     // ... data to create a BanterEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BanterEvent we want to update
     *   }
     * })
     */
    upsert<T extends BanterEventUpsertArgs>(args: SelectSubset<T, BanterEventUpsertArgs<ExtArgs>>): Prisma__BanterEventClient<$Result.GetResult<Prisma.$BanterEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BanterEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventCountArgs} args - Arguments to filter BanterEvents to count.
     * @example
     * // Count the number of BanterEvents
     * const count = await prisma.banterEvent.count({
     *   where: {
     *     // ... the filter for the BanterEvents we want to count
     *   }
     * })
    **/
    count<T extends BanterEventCountArgs>(
      args?: Subset<T, BanterEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BanterEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BanterEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BanterEventAggregateArgs>(args: Subset<T, BanterEventAggregateArgs>): Prisma.PrismaPromise<GetBanterEventAggregateType<T>>

    /**
     * Group by BanterEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanterEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BanterEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BanterEventGroupByArgs['orderBy'] }
        : { orderBy?: BanterEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BanterEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBanterEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BanterEvent model
   */
  readonly fields: BanterEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BanterEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BanterEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BanterEvent model
   */ 
  interface BanterEventFieldRefs {
    readonly id: FieldRef<"BanterEvent", 'String'>
    readonly triggeringContext: FieldRef<"BanterEvent", 'BanterEventContext'>
    readonly hostLine: FieldRef<"BanterEvent", 'String'>
    readonly navigatorLine: FieldRef<"BanterEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BanterEvent findUnique
   */
  export type BanterEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter, which BanterEvent to fetch.
     */
    where: BanterEventWhereUniqueInput
  }

  /**
   * BanterEvent findUniqueOrThrow
   */
  export type BanterEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter, which BanterEvent to fetch.
     */
    where: BanterEventWhereUniqueInput
  }

  /**
   * BanterEvent findFirst
   */
  export type BanterEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter, which BanterEvent to fetch.
     */
    where?: BanterEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanterEvents to fetch.
     */
    orderBy?: BanterEventOrderByWithRelationInput | BanterEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BanterEvents.
     */
    cursor?: BanterEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanterEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanterEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BanterEvents.
     */
    distinct?: BanterEventScalarFieldEnum | BanterEventScalarFieldEnum[]
  }

  /**
   * BanterEvent findFirstOrThrow
   */
  export type BanterEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter, which BanterEvent to fetch.
     */
    where?: BanterEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanterEvents to fetch.
     */
    orderBy?: BanterEventOrderByWithRelationInput | BanterEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BanterEvents.
     */
    cursor?: BanterEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanterEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanterEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BanterEvents.
     */
    distinct?: BanterEventScalarFieldEnum | BanterEventScalarFieldEnum[]
  }

  /**
   * BanterEvent findMany
   */
  export type BanterEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter, which BanterEvents to fetch.
     */
    where?: BanterEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanterEvents to fetch.
     */
    orderBy?: BanterEventOrderByWithRelationInput | BanterEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BanterEvents.
     */
    cursor?: BanterEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanterEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanterEvents.
     */
    skip?: number
    distinct?: BanterEventScalarFieldEnum | BanterEventScalarFieldEnum[]
  }

  /**
   * BanterEvent create
   */
  export type BanterEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * The data needed to create a BanterEvent.
     */
    data: XOR<BanterEventCreateInput, BanterEventUncheckedCreateInput>
  }

  /**
   * BanterEvent createMany
   */
  export type BanterEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BanterEvents.
     */
    data: BanterEventCreateManyInput | BanterEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BanterEvent createManyAndReturn
   */
  export type BanterEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BanterEvents.
     */
    data: BanterEventCreateManyInput | BanterEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BanterEvent update
   */
  export type BanterEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * The data needed to update a BanterEvent.
     */
    data: XOR<BanterEventUpdateInput, BanterEventUncheckedUpdateInput>
    /**
     * Choose, which BanterEvent to update.
     */
    where: BanterEventWhereUniqueInput
  }

  /**
   * BanterEvent updateMany
   */
  export type BanterEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BanterEvents.
     */
    data: XOR<BanterEventUpdateManyMutationInput, BanterEventUncheckedUpdateManyInput>
    /**
     * Filter which BanterEvents to update
     */
    where?: BanterEventWhereInput
  }

  /**
   * BanterEvent upsert
   */
  export type BanterEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * The filter to search for the BanterEvent to update in case it exists.
     */
    where: BanterEventWhereUniqueInput
    /**
     * In case the BanterEvent found by the `where` argument doesn't exist, create a new BanterEvent with this data.
     */
    create: XOR<BanterEventCreateInput, BanterEventUncheckedCreateInput>
    /**
     * In case the BanterEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BanterEventUpdateInput, BanterEventUncheckedUpdateInput>
  }

  /**
   * BanterEvent delete
   */
  export type BanterEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
    /**
     * Filter which BanterEvent to delete.
     */
    where: BanterEventWhereUniqueInput
  }

  /**
   * BanterEvent deleteMany
   */
  export type BanterEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BanterEvents to delete
     */
    where?: BanterEventWhereInput
  }

  /**
   * BanterEvent without action
   */
  export type BanterEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanterEvent
     */
    select?: BanterEventSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firebaseUid: 'firebaseUid',
    activeTripId: 'activeTripId',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PartnerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactEmail: 'contactEmail',
    createdAt: 'createdAt'
  };

  export type PartnerScalarFieldEnum = (typeof PartnerScalarFieldEnum)[keyof typeof PartnerScalarFieldEnum]


  export const TripScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    hostId: 'hostId',
    status: 'status',
    originLat: 'originLat',
    originLng: 'originLng',
    destinationLat: 'destinationLat',
    destinationLng: 'destinationLng',
    routeGeometry: 'routeGeometry',
    startedAt: 'startedAt',
    endedAt: 'endedAt'
  };

  export type TripScalarFieldEnum = (typeof TripScalarFieldEnum)[keyof typeof TripScalarFieldEnum]


  export const POIScalarFieldEnum: {
    id: 'id',
    partnerId: 'partnerId',
    name: 'name',
    description: 'description',
    category: 'category',
    latitude: 'latitude',
    longitude: 'longitude',
    geofenceRadiusMeters: 'geofenceRadiusMeters'
  };

  export type POIScalarFieldEnum = (typeof POIScalarFieldEnum)[keyof typeof POIScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    poiId: 'poiId',
    hostId: 'hostId',
    textContent: 'textContent',
    pregeneratedAudioUrl: 'pregeneratedAudioUrl'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const TriggerScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    priority: 'priority',
    conditions: 'conditions'
  };

  export type TriggerScalarFieldEnum = (typeof TriggerScalarFieldEnum)[keyof typeof TriggerScalarFieldEnum]


  export const HostProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    personaType: 'personaType',
    description: 'description',
    ttsService: 'ttsService',
    ttsVoiceId: 'ttsVoiceId'
  };

  export type HostProfileScalarFieldEnum = (typeof HostProfileScalarFieldEnum)[keyof typeof HostProfileScalarFieldEnum]


  export const AudioPackScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    musicThemeId: 'musicThemeId'
  };

  export type AudioPackScalarFieldEnum = (typeof AudioPackScalarFieldEnum)[keyof typeof AudioPackScalarFieldEnum]


  export const BanterEventScalarFieldEnum: {
    id: 'id',
    triggeringContext: 'triggeringContext',
    hostLine: 'hostLine',
    navigatorLine: 'navigatorLine'
  };

  export type BanterEventScalarFieldEnum = (typeof BanterEventScalarFieldEnum)[keyof typeof BanterEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TripStatus'
   */
  export type EnumTripStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TripStatus'>
    


  /**
   * Reference to a field of type 'TripStatus[]'
   */
  export type ListEnumTripStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TripStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'POICategory'
   */
  export type EnumPOICategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'POICategory'>
    


  /**
   * Reference to a field of type 'POICategory[]'
   */
  export type ListEnumPOICategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'POICategory[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'HostPersonaType'
   */
  export type EnumHostPersonaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostPersonaType'>
    


  /**
   * Reference to a field of type 'HostPersonaType[]'
   */
  export type ListEnumHostPersonaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostPersonaType[]'>
    


  /**
   * Reference to a field of type 'TTSService'
   */
  export type EnumTTSServiceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TTSService'>
    


  /**
   * Reference to a field of type 'TTSService[]'
   */
  export type ListEnumTTSServiceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TTSService[]'>
    


  /**
   * Reference to a field of type 'BanterEventContext'
   */
  export type EnumBanterEventContextFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BanterEventContext'>
    


  /**
   * Reference to a field of type 'BanterEventContext[]'
   */
  export type ListEnumBanterEventContextFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BanterEventContext[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firebaseUid?: StringFilter<"User"> | string
    activeTripId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    trips?: TripListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    activeTripId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    trips?: TripOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    firebaseUid?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    activeTripId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    trips?: TripListRelationFilter
  }, "id" | "firebaseUid">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    activeTripId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firebaseUid?: StringWithAggregatesFilter<"User"> | string
    activeTripId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PartnerWhereInput = {
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    id?: StringFilter<"Partner"> | string
    name?: StringFilter<"Partner"> | string
    contactEmail?: StringFilter<"Partner"> | string
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    pois?: POIListRelationFilter
  }

  export type PartnerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
    pois?: POIOrderByRelationAggregateInput
  }

  export type PartnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contactEmail?: string
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    name?: StringFilter<"Partner"> | string
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    pois?: POIListRelationFilter
  }, "id" | "contactEmail">

  export type PartnerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
    _count?: PartnerCountOrderByAggregateInput
    _max?: PartnerMaxOrderByAggregateInput
    _min?: PartnerMinOrderByAggregateInput
  }

  export type PartnerScalarWhereWithAggregatesInput = {
    AND?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    OR?: PartnerScalarWhereWithAggregatesInput[]
    NOT?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partner"> | string
    name?: StringWithAggregatesFilter<"Partner"> | string
    contactEmail?: StringWithAggregatesFilter<"Partner"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
  }

  export type TripWhereInput = {
    AND?: TripWhereInput | TripWhereInput[]
    OR?: TripWhereInput[]
    NOT?: TripWhereInput | TripWhereInput[]
    id?: StringFilter<"Trip"> | string
    userId?: StringFilter<"Trip"> | string
    hostId?: StringFilter<"Trip"> | string
    status?: EnumTripStatusFilter<"Trip"> | $Enums.TripStatus
    originLat?: FloatFilter<"Trip"> | number
    originLng?: FloatFilter<"Trip"> | number
    destinationLat?: FloatFilter<"Trip"> | number
    destinationLng?: FloatFilter<"Trip"> | number
    routeGeometry?: JsonNullableFilter<"Trip">
    startedAt?: DateTimeFilter<"Trip"> | Date | string
    endedAt?: DateTimeNullableFilter<"Trip"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    host?: XOR<HostProfileRelationFilter, HostProfileWhereInput>
  }

  export type TripOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    status?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    routeGeometry?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    host?: HostProfileOrderByWithRelationInput
  }

  export type TripWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TripWhereInput | TripWhereInput[]
    OR?: TripWhereInput[]
    NOT?: TripWhereInput | TripWhereInput[]
    userId?: StringFilter<"Trip"> | string
    hostId?: StringFilter<"Trip"> | string
    status?: EnumTripStatusFilter<"Trip"> | $Enums.TripStatus
    originLat?: FloatFilter<"Trip"> | number
    originLng?: FloatFilter<"Trip"> | number
    destinationLat?: FloatFilter<"Trip"> | number
    destinationLng?: FloatFilter<"Trip"> | number
    routeGeometry?: JsonNullableFilter<"Trip">
    startedAt?: DateTimeFilter<"Trip"> | Date | string
    endedAt?: DateTimeNullableFilter<"Trip"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    host?: XOR<HostProfileRelationFilter, HostProfileWhereInput>
  }, "id">

  export type TripOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    status?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    routeGeometry?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    _count?: TripCountOrderByAggregateInput
    _avg?: TripAvgOrderByAggregateInput
    _max?: TripMaxOrderByAggregateInput
    _min?: TripMinOrderByAggregateInput
    _sum?: TripSumOrderByAggregateInput
  }

  export type TripScalarWhereWithAggregatesInput = {
    AND?: TripScalarWhereWithAggregatesInput | TripScalarWhereWithAggregatesInput[]
    OR?: TripScalarWhereWithAggregatesInput[]
    NOT?: TripScalarWhereWithAggregatesInput | TripScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trip"> | string
    userId?: StringWithAggregatesFilter<"Trip"> | string
    hostId?: StringWithAggregatesFilter<"Trip"> | string
    status?: EnumTripStatusWithAggregatesFilter<"Trip"> | $Enums.TripStatus
    originLat?: FloatWithAggregatesFilter<"Trip"> | number
    originLng?: FloatWithAggregatesFilter<"Trip"> | number
    destinationLat?: FloatWithAggregatesFilter<"Trip"> | number
    destinationLng?: FloatWithAggregatesFilter<"Trip"> | number
    routeGeometry?: JsonNullableWithAggregatesFilter<"Trip">
    startedAt?: DateTimeWithAggregatesFilter<"Trip"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"Trip"> | Date | string | null
  }

  export type POIWhereInput = {
    AND?: POIWhereInput | POIWhereInput[]
    OR?: POIWhereInput[]
    NOT?: POIWhereInput | POIWhereInput[]
    id?: StringFilter<"POI"> | string
    partnerId?: StringNullableFilter<"POI"> | string | null
    name?: StringFilter<"POI"> | string
    description?: StringFilter<"POI"> | string
    category?: EnumPOICategoryFilter<"POI"> | $Enums.POICategory
    latitude?: FloatFilter<"POI"> | number
    longitude?: FloatFilter<"POI"> | number
    geofenceRadiusMeters?: IntFilter<"POI"> | number
    messages?: MessageListRelationFilter
    partner?: XOR<PartnerNullableRelationFilter, PartnerWhereInput> | null
  }

  export type POIOrderByWithRelationInput = {
    id?: SortOrder
    partnerId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
    partner?: PartnerOrderByWithRelationInput
  }

  export type POIWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: POIWhereInput | POIWhereInput[]
    OR?: POIWhereInput[]
    NOT?: POIWhereInput | POIWhereInput[]
    partnerId?: StringNullableFilter<"POI"> | string | null
    name?: StringFilter<"POI"> | string
    description?: StringFilter<"POI"> | string
    category?: EnumPOICategoryFilter<"POI"> | $Enums.POICategory
    latitude?: FloatFilter<"POI"> | number
    longitude?: FloatFilter<"POI"> | number
    geofenceRadiusMeters?: IntFilter<"POI"> | number
    messages?: MessageListRelationFilter
    partner?: XOR<PartnerNullableRelationFilter, PartnerWhereInput> | null
  }, "id">

  export type POIOrderByWithAggregationInput = {
    id?: SortOrder
    partnerId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
    _count?: POICountOrderByAggregateInput
    _avg?: POIAvgOrderByAggregateInput
    _max?: POIMaxOrderByAggregateInput
    _min?: POIMinOrderByAggregateInput
    _sum?: POISumOrderByAggregateInput
  }

  export type POIScalarWhereWithAggregatesInput = {
    AND?: POIScalarWhereWithAggregatesInput | POIScalarWhereWithAggregatesInput[]
    OR?: POIScalarWhereWithAggregatesInput[]
    NOT?: POIScalarWhereWithAggregatesInput | POIScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"POI"> | string
    partnerId?: StringNullableWithAggregatesFilter<"POI"> | string | null
    name?: StringWithAggregatesFilter<"POI"> | string
    description?: StringWithAggregatesFilter<"POI"> | string
    category?: EnumPOICategoryWithAggregatesFilter<"POI"> | $Enums.POICategory
    latitude?: FloatWithAggregatesFilter<"POI"> | number
    longitude?: FloatWithAggregatesFilter<"POI"> | number
    geofenceRadiusMeters?: IntWithAggregatesFilter<"POI"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    poiId?: StringFilter<"Message"> | string
    hostId?: StringFilter<"Message"> | string
    textContent?: StringFilter<"Message"> | string
    pregeneratedAudioUrl?: StringNullableFilter<"Message"> | string | null
    triggers?: TriggerListRelationFilter
    poi?: XOR<POIRelationFilter, POIWhereInput>
    host?: XOR<HostProfileRelationFilter, HostProfileWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    poiId?: SortOrder
    hostId?: SortOrder
    textContent?: SortOrder
    pregeneratedAudioUrl?: SortOrderInput | SortOrder
    triggers?: TriggerOrderByRelationAggregateInput
    poi?: POIOrderByWithRelationInput
    host?: HostProfileOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    poiId?: StringFilter<"Message"> | string
    hostId?: StringFilter<"Message"> | string
    textContent?: StringFilter<"Message"> | string
    pregeneratedAudioUrl?: StringNullableFilter<"Message"> | string | null
    triggers?: TriggerListRelationFilter
    poi?: XOR<POIRelationFilter, POIWhereInput>
    host?: XOR<HostProfileRelationFilter, HostProfileWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    poiId?: SortOrder
    hostId?: SortOrder
    textContent?: SortOrder
    pregeneratedAudioUrl?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    poiId?: StringWithAggregatesFilter<"Message"> | string
    hostId?: StringWithAggregatesFilter<"Message"> | string
    textContent?: StringWithAggregatesFilter<"Message"> | string
    pregeneratedAudioUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
  }

  export type TriggerWhereInput = {
    AND?: TriggerWhereInput | TriggerWhereInput[]
    OR?: TriggerWhereInput[]
    NOT?: TriggerWhereInput | TriggerWhereInput[]
    id?: StringFilter<"Trigger"> | string
    messageId?: StringFilter<"Trigger"> | string
    priority?: IntFilter<"Trigger"> | number
    conditions?: JsonFilter<"Trigger">
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type TriggerOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    priority?: SortOrder
    conditions?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type TriggerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TriggerWhereInput | TriggerWhereInput[]
    OR?: TriggerWhereInput[]
    NOT?: TriggerWhereInput | TriggerWhereInput[]
    messageId?: StringFilter<"Trigger"> | string
    priority?: IntFilter<"Trigger"> | number
    conditions?: JsonFilter<"Trigger">
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id">

  export type TriggerOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    priority?: SortOrder
    conditions?: SortOrder
    _count?: TriggerCountOrderByAggregateInput
    _avg?: TriggerAvgOrderByAggregateInput
    _max?: TriggerMaxOrderByAggregateInput
    _min?: TriggerMinOrderByAggregateInput
    _sum?: TriggerSumOrderByAggregateInput
  }

  export type TriggerScalarWhereWithAggregatesInput = {
    AND?: TriggerScalarWhereWithAggregatesInput | TriggerScalarWhereWithAggregatesInput[]
    OR?: TriggerScalarWhereWithAggregatesInput[]
    NOT?: TriggerScalarWhereWithAggregatesInput | TriggerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trigger"> | string
    messageId?: StringWithAggregatesFilter<"Trigger"> | string
    priority?: IntWithAggregatesFilter<"Trigger"> | number
    conditions?: JsonWithAggregatesFilter<"Trigger">
  }

  export type HostProfileWhereInput = {
    AND?: HostProfileWhereInput | HostProfileWhereInput[]
    OR?: HostProfileWhereInput[]
    NOT?: HostProfileWhereInput | HostProfileWhereInput[]
    id?: StringFilter<"HostProfile"> | string
    name?: StringFilter<"HostProfile"> | string
    personaType?: EnumHostPersonaTypeFilter<"HostProfile"> | $Enums.HostPersonaType
    description?: StringFilter<"HostProfile"> | string
    ttsService?: EnumTTSServiceFilter<"HostProfile"> | $Enums.TTSService
    ttsVoiceId?: StringFilter<"HostProfile"> | string
    trips?: TripListRelationFilter
    messages?: MessageListRelationFilter
    audioPacks?: AudioPackListRelationFilter
  }

  export type HostProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    personaType?: SortOrder
    description?: SortOrder
    ttsService?: SortOrder
    ttsVoiceId?: SortOrder
    trips?: TripOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    audioPacks?: AudioPackOrderByRelationAggregateInput
  }

  export type HostProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: HostProfileWhereInput | HostProfileWhereInput[]
    OR?: HostProfileWhereInput[]
    NOT?: HostProfileWhereInput | HostProfileWhereInput[]
    personaType?: EnumHostPersonaTypeFilter<"HostProfile"> | $Enums.HostPersonaType
    description?: StringFilter<"HostProfile"> | string
    ttsService?: EnumTTSServiceFilter<"HostProfile"> | $Enums.TTSService
    ttsVoiceId?: StringFilter<"HostProfile"> | string
    trips?: TripListRelationFilter
    messages?: MessageListRelationFilter
    audioPacks?: AudioPackListRelationFilter
  }, "id" | "name">

  export type HostProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    personaType?: SortOrder
    description?: SortOrder
    ttsService?: SortOrder
    ttsVoiceId?: SortOrder
    _count?: HostProfileCountOrderByAggregateInput
    _max?: HostProfileMaxOrderByAggregateInput
    _min?: HostProfileMinOrderByAggregateInput
  }

  export type HostProfileScalarWhereWithAggregatesInput = {
    AND?: HostProfileScalarWhereWithAggregatesInput | HostProfileScalarWhereWithAggregatesInput[]
    OR?: HostProfileScalarWhereWithAggregatesInput[]
    NOT?: HostProfileScalarWhereWithAggregatesInput | HostProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HostProfile"> | string
    name?: StringWithAggregatesFilter<"HostProfile"> | string
    personaType?: EnumHostPersonaTypeWithAggregatesFilter<"HostProfile"> | $Enums.HostPersonaType
    description?: StringWithAggregatesFilter<"HostProfile"> | string
    ttsService?: EnumTTSServiceWithAggregatesFilter<"HostProfile"> | $Enums.TTSService
    ttsVoiceId?: StringWithAggregatesFilter<"HostProfile"> | string
  }

  export type AudioPackWhereInput = {
    AND?: AudioPackWhereInput | AudioPackWhereInput[]
    OR?: AudioPackWhereInput[]
    NOT?: AudioPackWhereInput | AudioPackWhereInput[]
    id?: StringFilter<"AudioPack"> | string
    name?: StringFilter<"AudioPack"> | string
    description?: StringFilter<"AudioPack"> | string
    musicThemeId?: StringFilter<"AudioPack"> | string
    hosts?: HostProfileListRelationFilter
  }

  export type AudioPackOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    musicThemeId?: SortOrder
    hosts?: HostProfileOrderByRelationAggregateInput
  }

  export type AudioPackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AudioPackWhereInput | AudioPackWhereInput[]
    OR?: AudioPackWhereInput[]
    NOT?: AudioPackWhereInput | AudioPackWhereInput[]
    description?: StringFilter<"AudioPack"> | string
    musicThemeId?: StringFilter<"AudioPack"> | string
    hosts?: HostProfileListRelationFilter
  }, "id" | "name">

  export type AudioPackOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    musicThemeId?: SortOrder
    _count?: AudioPackCountOrderByAggregateInput
    _max?: AudioPackMaxOrderByAggregateInput
    _min?: AudioPackMinOrderByAggregateInput
  }

  export type AudioPackScalarWhereWithAggregatesInput = {
    AND?: AudioPackScalarWhereWithAggregatesInput | AudioPackScalarWhereWithAggregatesInput[]
    OR?: AudioPackScalarWhereWithAggregatesInput[]
    NOT?: AudioPackScalarWhereWithAggregatesInput | AudioPackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AudioPack"> | string
    name?: StringWithAggregatesFilter<"AudioPack"> | string
    description?: StringWithAggregatesFilter<"AudioPack"> | string
    musicThemeId?: StringWithAggregatesFilter<"AudioPack"> | string
  }

  export type BanterEventWhereInput = {
    AND?: BanterEventWhereInput | BanterEventWhereInput[]
    OR?: BanterEventWhereInput[]
    NOT?: BanterEventWhereInput | BanterEventWhereInput[]
    id?: StringFilter<"BanterEvent"> | string
    triggeringContext?: EnumBanterEventContextFilter<"BanterEvent"> | $Enums.BanterEventContext
    hostLine?: StringFilter<"BanterEvent"> | string
    navigatorLine?: StringFilter<"BanterEvent"> | string
  }

  export type BanterEventOrderByWithRelationInput = {
    id?: SortOrder
    triggeringContext?: SortOrder
    hostLine?: SortOrder
    navigatorLine?: SortOrder
  }

  export type BanterEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BanterEventWhereInput | BanterEventWhereInput[]
    OR?: BanterEventWhereInput[]
    NOT?: BanterEventWhereInput | BanterEventWhereInput[]
    triggeringContext?: EnumBanterEventContextFilter<"BanterEvent"> | $Enums.BanterEventContext
    hostLine?: StringFilter<"BanterEvent"> | string
    navigatorLine?: StringFilter<"BanterEvent"> | string
  }, "id">

  export type BanterEventOrderByWithAggregationInput = {
    id?: SortOrder
    triggeringContext?: SortOrder
    hostLine?: SortOrder
    navigatorLine?: SortOrder
    _count?: BanterEventCountOrderByAggregateInput
    _max?: BanterEventMaxOrderByAggregateInput
    _min?: BanterEventMinOrderByAggregateInput
  }

  export type BanterEventScalarWhereWithAggregatesInput = {
    AND?: BanterEventScalarWhereWithAggregatesInput | BanterEventScalarWhereWithAggregatesInput[]
    OR?: BanterEventScalarWhereWithAggregatesInput[]
    NOT?: BanterEventScalarWhereWithAggregatesInput | BanterEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BanterEvent"> | string
    triggeringContext?: EnumBanterEventContextWithAggregatesFilter<"BanterEvent"> | $Enums.BanterEventContext
    hostLine?: StringWithAggregatesFilter<"BanterEvent"> | string
    navigatorLine?: StringWithAggregatesFilter<"BanterEvent"> | string
  }

  export type UserCreateInput = {
    id?: string
    firebaseUid: string
    activeTripId?: string | null
    createdAt?: Date | string
    trips?: TripCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firebaseUid: string
    activeTripId?: string | null
    createdAt?: Date | string
    trips?: TripUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trips?: TripUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trips?: TripUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firebaseUid: string
    activeTripId?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateInput = {
    id?: string
    name: string
    contactEmail: string
    createdAt?: Date | string
    pois?: POICreateNestedManyWithoutPartnerInput
  }

  export type PartnerUncheckedCreateInput = {
    id?: string
    name: string
    contactEmail: string
    createdAt?: Date | string
    pois?: POIUncheckedCreateNestedManyWithoutPartnerInput
  }

  export type PartnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pois?: POIUpdateManyWithoutPartnerNestedInput
  }

  export type PartnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pois?: POIUncheckedUpdateManyWithoutPartnerNestedInput
  }

  export type PartnerCreateManyInput = {
    id?: string
    name: string
    contactEmail: string
    createdAt?: Date | string
  }

  export type PartnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TripCreateInput = {
    id?: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTripsInput
    host: HostProfileCreateNestedOneWithoutTripsInput
  }

  export type TripUncheckedCreateInput = {
    id?: string
    userId: string
    hostId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type TripUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTripsNestedInput
    host?: HostProfileUpdateOneRequiredWithoutTripsNestedInput
  }

  export type TripUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TripCreateManyInput = {
    id?: string
    userId: string
    hostId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type TripUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TripUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type POICreateInput = {
    id?: string
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    messages?: MessageCreateNestedManyWithoutPoiInput
    partner?: PartnerCreateNestedOneWithoutPoisInput
  }

  export type POIUncheckedCreateInput = {
    id?: string
    partnerId?: string | null
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    messages?: MessageUncheckedCreateNestedManyWithoutPoiInput
  }

  export type POIUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
    messages?: MessageUpdateManyWithoutPoiNestedInput
    partner?: PartnerUpdateOneWithoutPoisNestedInput
  }

  export type POIUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnerId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutPoiNestedInput
  }

  export type POICreateManyInput = {
    id?: string
    partnerId?: string | null
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
  }

  export type POIUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
  }

  export type POIUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnerId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    id?: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerCreateNestedManyWithoutMessageInput
    poi: POICreateNestedOneWithoutMessagesInput
    host: HostProfileCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    poiId: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUpdateManyWithoutMessageNestedInput
    poi?: POIUpdateOneRequiredWithoutMessagesNestedInput
    host?: HostProfileUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    poiId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    poiId: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    poiId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TriggerCreateInput = {
    id?: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
    message: MessageCreateNestedOneWithoutTriggersInput
  }

  export type TriggerUncheckedCreateInput = {
    id?: string
    messageId: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
    message?: MessageUpdateOneRequiredWithoutTriggersNestedInput
  }

  export type TriggerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerCreateManyInput = {
    id?: string
    messageId: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type HostProfileCreateInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripCreateNestedManyWithoutHostInput
    messages?: MessageCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackCreateNestedManyWithoutHostsInput
  }

  export type HostProfileUncheckedCreateInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripUncheckedCreateNestedManyWithoutHostInput
    messages?: MessageUncheckedCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackUncheckedCreateNestedManyWithoutHostsInput
  }

  export type HostProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUpdateManyWithoutHostNestedInput
    messages?: MessageUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUpdateManyWithoutHostsNestedInput
  }

  export type HostProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUncheckedUpdateManyWithoutHostNestedInput
    messages?: MessageUncheckedUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUncheckedUpdateManyWithoutHostsNestedInput
  }

  export type HostProfileCreateManyInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
  }

  export type HostProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
  }

  export type HostProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
  }

  export type AudioPackCreateInput = {
    id?: string
    name: string
    description: string
    musicThemeId: string
    hosts?: HostProfileCreateNestedManyWithoutAudioPacksInput
  }

  export type AudioPackUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    musicThemeId: string
    hosts?: HostProfileUncheckedCreateNestedManyWithoutAudioPacksInput
  }

  export type AudioPackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
    hosts?: HostProfileUpdateManyWithoutAudioPacksNestedInput
  }

  export type AudioPackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
    hosts?: HostProfileUncheckedUpdateManyWithoutAudioPacksNestedInput
  }

  export type AudioPackCreateManyInput = {
    id?: string
    name: string
    description: string
    musicThemeId: string
  }

  export type AudioPackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
  }

  export type AudioPackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
  }

  export type BanterEventCreateInput = {
    id?: string
    triggeringContext: $Enums.BanterEventContext
    hostLine: string
    navigatorLine: string
  }

  export type BanterEventUncheckedCreateInput = {
    id?: string
    triggeringContext: $Enums.BanterEventContext
    hostLine: string
    navigatorLine: string
  }

  export type BanterEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeringContext?: EnumBanterEventContextFieldUpdateOperationsInput | $Enums.BanterEventContext
    hostLine?: StringFieldUpdateOperationsInput | string
    navigatorLine?: StringFieldUpdateOperationsInput | string
  }

  export type BanterEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeringContext?: EnumBanterEventContextFieldUpdateOperationsInput | $Enums.BanterEventContext
    hostLine?: StringFieldUpdateOperationsInput | string
    navigatorLine?: StringFieldUpdateOperationsInput | string
  }

  export type BanterEventCreateManyInput = {
    id?: string
    triggeringContext: $Enums.BanterEventContext
    hostLine: string
    navigatorLine: string
  }

  export type BanterEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeringContext?: EnumBanterEventContextFieldUpdateOperationsInput | $Enums.BanterEventContext
    hostLine?: StringFieldUpdateOperationsInput | string
    navigatorLine?: StringFieldUpdateOperationsInput | string
  }

  export type BanterEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeringContext?: EnumBanterEventContextFieldUpdateOperationsInput | $Enums.BanterEventContext
    hostLine?: StringFieldUpdateOperationsInput | string
    navigatorLine?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TripListRelationFilter = {
    every?: TripWhereInput
    some?: TripWhereInput
    none?: TripWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TripOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    activeTripId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    activeTripId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    activeTripId?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type POIListRelationFilter = {
    every?: POIWhereInput
    some?: POIWhereInput
    none?: POIWhereInput
  }

  export type POIOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartnerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type PartnerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type PartnerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTripStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TripStatus | EnumTripStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTripStatusFilter<$PrismaModel> | $Enums.TripStatus
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HostProfileRelationFilter = {
    is?: HostProfileWhereInput
    isNot?: HostProfileWhereInput
  }

  export type TripCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    status?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    routeGeometry?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type TripAvgOrderByAggregateInput = {
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
  }

  export type TripMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    status?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type TripMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    status?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type TripSumOrderByAggregateInput = {
    originLat?: SortOrder
    originLng?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
  }

  export type EnumTripStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TripStatus | EnumTripStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTripStatusWithAggregatesFilter<$PrismaModel> | $Enums.TripStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTripStatusFilter<$PrismaModel>
    _max?: NestedEnumTripStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumPOICategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.POICategory | EnumPOICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPOICategoryFilter<$PrismaModel> | $Enums.POICategory
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type PartnerNullableRelationFilter = {
    is?: PartnerWhereInput | null
    isNot?: PartnerWhereInput | null
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type POICountOrderByAggregateInput = {
    id?: SortOrder
    partnerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
  }

  export type POIAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
  }

  export type POIMaxOrderByAggregateInput = {
    id?: SortOrder
    partnerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
  }

  export type POIMinOrderByAggregateInput = {
    id?: SortOrder
    partnerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
  }

  export type POISumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    geofenceRadiusMeters?: SortOrder
  }

  export type EnumPOICategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.POICategory | EnumPOICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPOICategoryWithAggregatesFilter<$PrismaModel> | $Enums.POICategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPOICategoryFilter<$PrismaModel>
    _max?: NestedEnumPOICategoryFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type TriggerListRelationFilter = {
    every?: TriggerWhereInput
    some?: TriggerWhereInput
    none?: TriggerWhereInput
  }

  export type POIRelationFilter = {
    is?: POIWhereInput
    isNot?: POIWhereInput
  }

  export type TriggerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    poiId?: SortOrder
    hostId?: SortOrder
    textContent?: SortOrder
    pregeneratedAudioUrl?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    poiId?: SortOrder
    hostId?: SortOrder
    textContent?: SortOrder
    pregeneratedAudioUrl?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    poiId?: SortOrder
    hostId?: SortOrder
    textContent?: SortOrder
    pregeneratedAudioUrl?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type TriggerCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    priority?: SortOrder
    conditions?: SortOrder
  }

  export type TriggerAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type TriggerMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    priority?: SortOrder
  }

  export type TriggerMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    priority?: SortOrder
  }

  export type TriggerSumOrderByAggregateInput = {
    priority?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumHostPersonaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HostPersonaType | EnumHostPersonaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHostPersonaTypeFilter<$PrismaModel> | $Enums.HostPersonaType
  }

  export type EnumTTSServiceFilter<$PrismaModel = never> = {
    equals?: $Enums.TTSService | EnumTTSServiceFieldRefInput<$PrismaModel>
    in?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    notIn?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    not?: NestedEnumTTSServiceFilter<$PrismaModel> | $Enums.TTSService
  }

  export type AudioPackListRelationFilter = {
    every?: AudioPackWhereInput
    some?: AudioPackWhereInput
    none?: AudioPackWhereInput
  }

  export type AudioPackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    personaType?: SortOrder
    description?: SortOrder
    ttsService?: SortOrder
    ttsVoiceId?: SortOrder
  }

  export type HostProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    personaType?: SortOrder
    description?: SortOrder
    ttsService?: SortOrder
    ttsVoiceId?: SortOrder
  }

  export type HostProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    personaType?: SortOrder
    description?: SortOrder
    ttsService?: SortOrder
    ttsVoiceId?: SortOrder
  }

  export type EnumHostPersonaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostPersonaType | EnumHostPersonaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHostPersonaTypeWithAggregatesFilter<$PrismaModel> | $Enums.HostPersonaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostPersonaTypeFilter<$PrismaModel>
    _max?: NestedEnumHostPersonaTypeFilter<$PrismaModel>
  }

  export type EnumTTSServiceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TTSService | EnumTTSServiceFieldRefInput<$PrismaModel>
    in?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    notIn?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    not?: NestedEnumTTSServiceWithAggregatesFilter<$PrismaModel> | $Enums.TTSService
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTTSServiceFilter<$PrismaModel>
    _max?: NestedEnumTTSServiceFilter<$PrismaModel>
  }

  export type HostProfileListRelationFilter = {
    every?: HostProfileWhereInput
    some?: HostProfileWhereInput
    none?: HostProfileWhereInput
  }

  export type HostProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AudioPackCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    musicThemeId?: SortOrder
  }

  export type AudioPackMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    musicThemeId?: SortOrder
  }

  export type AudioPackMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    musicThemeId?: SortOrder
  }

  export type EnumBanterEventContextFilter<$PrismaModel = never> = {
    equals?: $Enums.BanterEventContext | EnumBanterEventContextFieldRefInput<$PrismaModel>
    in?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    not?: NestedEnumBanterEventContextFilter<$PrismaModel> | $Enums.BanterEventContext
  }

  export type BanterEventCountOrderByAggregateInput = {
    id?: SortOrder
    triggeringContext?: SortOrder
    hostLine?: SortOrder
    navigatorLine?: SortOrder
  }

  export type BanterEventMaxOrderByAggregateInput = {
    id?: SortOrder
    triggeringContext?: SortOrder
    hostLine?: SortOrder
    navigatorLine?: SortOrder
  }

  export type BanterEventMinOrderByAggregateInput = {
    id?: SortOrder
    triggeringContext?: SortOrder
    hostLine?: SortOrder
    navigatorLine?: SortOrder
  }

  export type EnumBanterEventContextWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BanterEventContext | EnumBanterEventContextFieldRefInput<$PrismaModel>
    in?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    not?: NestedEnumBanterEventContextWithAggregatesFilter<$PrismaModel> | $Enums.BanterEventContext
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBanterEventContextFilter<$PrismaModel>
    _max?: NestedEnumBanterEventContextFilter<$PrismaModel>
  }

  export type TripCreateNestedManyWithoutUserInput = {
    create?: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput> | TripCreateWithoutUserInput[] | TripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TripCreateOrConnectWithoutUserInput | TripCreateOrConnectWithoutUserInput[]
    createMany?: TripCreateManyUserInputEnvelope
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
  }

  export type TripUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput> | TripCreateWithoutUserInput[] | TripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TripCreateOrConnectWithoutUserInput | TripCreateOrConnectWithoutUserInput[]
    createMany?: TripCreateManyUserInputEnvelope
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TripUpdateManyWithoutUserNestedInput = {
    create?: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput> | TripCreateWithoutUserInput[] | TripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TripCreateOrConnectWithoutUserInput | TripCreateOrConnectWithoutUserInput[]
    upsert?: TripUpsertWithWhereUniqueWithoutUserInput | TripUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TripCreateManyUserInputEnvelope
    set?: TripWhereUniqueInput | TripWhereUniqueInput[]
    disconnect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    delete?: TripWhereUniqueInput | TripWhereUniqueInput[]
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    update?: TripUpdateWithWhereUniqueWithoutUserInput | TripUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TripUpdateManyWithWhereWithoutUserInput | TripUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TripScalarWhereInput | TripScalarWhereInput[]
  }

  export type TripUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput> | TripCreateWithoutUserInput[] | TripUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TripCreateOrConnectWithoutUserInput | TripCreateOrConnectWithoutUserInput[]
    upsert?: TripUpsertWithWhereUniqueWithoutUserInput | TripUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TripCreateManyUserInputEnvelope
    set?: TripWhereUniqueInput | TripWhereUniqueInput[]
    disconnect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    delete?: TripWhereUniqueInput | TripWhereUniqueInput[]
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    update?: TripUpdateWithWhereUniqueWithoutUserInput | TripUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TripUpdateManyWithWhereWithoutUserInput | TripUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TripScalarWhereInput | TripScalarWhereInput[]
  }

  export type POICreateNestedManyWithoutPartnerInput = {
    create?: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput> | POICreateWithoutPartnerInput[] | POIUncheckedCreateWithoutPartnerInput[]
    connectOrCreate?: POICreateOrConnectWithoutPartnerInput | POICreateOrConnectWithoutPartnerInput[]
    createMany?: POICreateManyPartnerInputEnvelope
    connect?: POIWhereUniqueInput | POIWhereUniqueInput[]
  }

  export type POIUncheckedCreateNestedManyWithoutPartnerInput = {
    create?: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput> | POICreateWithoutPartnerInput[] | POIUncheckedCreateWithoutPartnerInput[]
    connectOrCreate?: POICreateOrConnectWithoutPartnerInput | POICreateOrConnectWithoutPartnerInput[]
    createMany?: POICreateManyPartnerInputEnvelope
    connect?: POIWhereUniqueInput | POIWhereUniqueInput[]
  }

  export type POIUpdateManyWithoutPartnerNestedInput = {
    create?: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput> | POICreateWithoutPartnerInput[] | POIUncheckedCreateWithoutPartnerInput[]
    connectOrCreate?: POICreateOrConnectWithoutPartnerInput | POICreateOrConnectWithoutPartnerInput[]
    upsert?: POIUpsertWithWhereUniqueWithoutPartnerInput | POIUpsertWithWhereUniqueWithoutPartnerInput[]
    createMany?: POICreateManyPartnerInputEnvelope
    set?: POIWhereUniqueInput | POIWhereUniqueInput[]
    disconnect?: POIWhereUniqueInput | POIWhereUniqueInput[]
    delete?: POIWhereUniqueInput | POIWhereUniqueInput[]
    connect?: POIWhereUniqueInput | POIWhereUniqueInput[]
    update?: POIUpdateWithWhereUniqueWithoutPartnerInput | POIUpdateWithWhereUniqueWithoutPartnerInput[]
    updateMany?: POIUpdateManyWithWhereWithoutPartnerInput | POIUpdateManyWithWhereWithoutPartnerInput[]
    deleteMany?: POIScalarWhereInput | POIScalarWhereInput[]
  }

  export type POIUncheckedUpdateManyWithoutPartnerNestedInput = {
    create?: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput> | POICreateWithoutPartnerInput[] | POIUncheckedCreateWithoutPartnerInput[]
    connectOrCreate?: POICreateOrConnectWithoutPartnerInput | POICreateOrConnectWithoutPartnerInput[]
    upsert?: POIUpsertWithWhereUniqueWithoutPartnerInput | POIUpsertWithWhereUniqueWithoutPartnerInput[]
    createMany?: POICreateManyPartnerInputEnvelope
    set?: POIWhereUniqueInput | POIWhereUniqueInput[]
    disconnect?: POIWhereUniqueInput | POIWhereUniqueInput[]
    delete?: POIWhereUniqueInput | POIWhereUniqueInput[]
    connect?: POIWhereUniqueInput | POIWhereUniqueInput[]
    update?: POIUpdateWithWhereUniqueWithoutPartnerInput | POIUpdateWithWhereUniqueWithoutPartnerInput[]
    updateMany?: POIUpdateManyWithWhereWithoutPartnerInput | POIUpdateManyWithWhereWithoutPartnerInput[]
    deleteMany?: POIScalarWhereInput | POIScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTripsInput = {
    create?: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTripsInput
    connect?: UserWhereUniqueInput
  }

  export type HostProfileCreateNestedOneWithoutTripsInput = {
    create?: XOR<HostProfileCreateWithoutTripsInput, HostProfileUncheckedCreateWithoutTripsInput>
    connectOrCreate?: HostProfileCreateOrConnectWithoutTripsInput
    connect?: HostProfileWhereUniqueInput
  }

  export type EnumTripStatusFieldUpdateOperationsInput = {
    set?: $Enums.TripStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutTripsNestedInput = {
    create?: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTripsInput
    upsert?: UserUpsertWithoutTripsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTripsInput, UserUpdateWithoutTripsInput>, UserUncheckedUpdateWithoutTripsInput>
  }

  export type HostProfileUpdateOneRequiredWithoutTripsNestedInput = {
    create?: XOR<HostProfileCreateWithoutTripsInput, HostProfileUncheckedCreateWithoutTripsInput>
    connectOrCreate?: HostProfileCreateOrConnectWithoutTripsInput
    upsert?: HostProfileUpsertWithoutTripsInput
    connect?: HostProfileWhereUniqueInput
    update?: XOR<XOR<HostProfileUpdateToOneWithWhereWithoutTripsInput, HostProfileUpdateWithoutTripsInput>, HostProfileUncheckedUpdateWithoutTripsInput>
  }

  export type MessageCreateNestedManyWithoutPoiInput = {
    create?: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput> | MessageCreateWithoutPoiInput[] | MessageUncheckedCreateWithoutPoiInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPoiInput | MessageCreateOrConnectWithoutPoiInput[]
    createMany?: MessageCreateManyPoiInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type PartnerCreateNestedOneWithoutPoisInput = {
    create?: XOR<PartnerCreateWithoutPoisInput, PartnerUncheckedCreateWithoutPoisInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutPoisInput
    connect?: PartnerWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutPoiInput = {
    create?: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput> | MessageCreateWithoutPoiInput[] | MessageUncheckedCreateWithoutPoiInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPoiInput | MessageCreateOrConnectWithoutPoiInput[]
    createMany?: MessageCreateManyPoiInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumPOICategoryFieldUpdateOperationsInput = {
    set?: $Enums.POICategory
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessageUpdateManyWithoutPoiNestedInput = {
    create?: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput> | MessageCreateWithoutPoiInput[] | MessageUncheckedCreateWithoutPoiInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPoiInput | MessageCreateOrConnectWithoutPoiInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPoiInput | MessageUpsertWithWhereUniqueWithoutPoiInput[]
    createMany?: MessageCreateManyPoiInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPoiInput | MessageUpdateWithWhereUniqueWithoutPoiInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPoiInput | MessageUpdateManyWithWhereWithoutPoiInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type PartnerUpdateOneWithoutPoisNestedInput = {
    create?: XOR<PartnerCreateWithoutPoisInput, PartnerUncheckedCreateWithoutPoisInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutPoisInput
    upsert?: PartnerUpsertWithoutPoisInput
    disconnect?: PartnerWhereInput | boolean
    delete?: PartnerWhereInput | boolean
    connect?: PartnerWhereUniqueInput
    update?: XOR<XOR<PartnerUpdateToOneWithWhereWithoutPoisInput, PartnerUpdateWithoutPoisInput>, PartnerUncheckedUpdateWithoutPoisInput>
  }

  export type MessageUncheckedUpdateManyWithoutPoiNestedInput = {
    create?: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput> | MessageCreateWithoutPoiInput[] | MessageUncheckedCreateWithoutPoiInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPoiInput | MessageCreateOrConnectWithoutPoiInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPoiInput | MessageUpsertWithWhereUniqueWithoutPoiInput[]
    createMany?: MessageCreateManyPoiInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPoiInput | MessageUpdateWithWhereUniqueWithoutPoiInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPoiInput | MessageUpdateManyWithWhereWithoutPoiInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type TriggerCreateNestedManyWithoutMessageInput = {
    create?: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput> | TriggerCreateWithoutMessageInput[] | TriggerUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutMessageInput | TriggerCreateOrConnectWithoutMessageInput[]
    createMany?: TriggerCreateManyMessageInputEnvelope
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
  }

  export type POICreateNestedOneWithoutMessagesInput = {
    create?: XOR<POICreateWithoutMessagesInput, POIUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: POICreateOrConnectWithoutMessagesInput
    connect?: POIWhereUniqueInput
  }

  export type HostProfileCreateNestedOneWithoutMessagesInput = {
    create?: XOR<HostProfileCreateWithoutMessagesInput, HostProfileUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: HostProfileCreateOrConnectWithoutMessagesInput
    connect?: HostProfileWhereUniqueInput
  }

  export type TriggerUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput> | TriggerCreateWithoutMessageInput[] | TriggerUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutMessageInput | TriggerCreateOrConnectWithoutMessageInput[]
    createMany?: TriggerCreateManyMessageInputEnvelope
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
  }

  export type TriggerUpdateManyWithoutMessageNestedInput = {
    create?: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput> | TriggerCreateWithoutMessageInput[] | TriggerUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutMessageInput | TriggerCreateOrConnectWithoutMessageInput[]
    upsert?: TriggerUpsertWithWhereUniqueWithoutMessageInput | TriggerUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: TriggerCreateManyMessageInputEnvelope
    set?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    disconnect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    delete?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    update?: TriggerUpdateWithWhereUniqueWithoutMessageInput | TriggerUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: TriggerUpdateManyWithWhereWithoutMessageInput | TriggerUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
  }

  export type POIUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<POICreateWithoutMessagesInput, POIUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: POICreateOrConnectWithoutMessagesInput
    upsert?: POIUpsertWithoutMessagesInput
    connect?: POIWhereUniqueInput
    update?: XOR<XOR<POIUpdateToOneWithWhereWithoutMessagesInput, POIUpdateWithoutMessagesInput>, POIUncheckedUpdateWithoutMessagesInput>
  }

  export type HostProfileUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<HostProfileCreateWithoutMessagesInput, HostProfileUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: HostProfileCreateOrConnectWithoutMessagesInput
    upsert?: HostProfileUpsertWithoutMessagesInput
    connect?: HostProfileWhereUniqueInput
    update?: XOR<XOR<HostProfileUpdateToOneWithWhereWithoutMessagesInput, HostProfileUpdateWithoutMessagesInput>, HostProfileUncheckedUpdateWithoutMessagesInput>
  }

  export type TriggerUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput> | TriggerCreateWithoutMessageInput[] | TriggerUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutMessageInput | TriggerCreateOrConnectWithoutMessageInput[]
    upsert?: TriggerUpsertWithWhereUniqueWithoutMessageInput | TriggerUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: TriggerCreateManyMessageInputEnvelope
    set?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    disconnect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    delete?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    update?: TriggerUpdateWithWhereUniqueWithoutMessageInput | TriggerUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: TriggerUpdateManyWithWhereWithoutMessageInput | TriggerUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutTriggersInput = {
    create?: XOR<MessageCreateWithoutTriggersInput, MessageUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: MessageCreateOrConnectWithoutTriggersInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutTriggersNestedInput = {
    create?: XOR<MessageCreateWithoutTriggersInput, MessageUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: MessageCreateOrConnectWithoutTriggersInput
    upsert?: MessageUpsertWithoutTriggersInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutTriggersInput, MessageUpdateWithoutTriggersInput>, MessageUncheckedUpdateWithoutTriggersInput>
  }

  export type TripCreateNestedManyWithoutHostInput = {
    create?: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput> | TripCreateWithoutHostInput[] | TripUncheckedCreateWithoutHostInput[]
    connectOrCreate?: TripCreateOrConnectWithoutHostInput | TripCreateOrConnectWithoutHostInput[]
    createMany?: TripCreateManyHostInputEnvelope
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutHostInput = {
    create?: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput> | MessageCreateWithoutHostInput[] | MessageUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutHostInput | MessageCreateOrConnectWithoutHostInput[]
    createMany?: MessageCreateManyHostInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AudioPackCreateNestedManyWithoutHostsInput = {
    create?: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput> | AudioPackCreateWithoutHostsInput[] | AudioPackUncheckedCreateWithoutHostsInput[]
    connectOrCreate?: AudioPackCreateOrConnectWithoutHostsInput | AudioPackCreateOrConnectWithoutHostsInput[]
    connect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
  }

  export type TripUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput> | TripCreateWithoutHostInput[] | TripUncheckedCreateWithoutHostInput[]
    connectOrCreate?: TripCreateOrConnectWithoutHostInput | TripCreateOrConnectWithoutHostInput[]
    createMany?: TripCreateManyHostInputEnvelope
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput> | MessageCreateWithoutHostInput[] | MessageUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutHostInput | MessageCreateOrConnectWithoutHostInput[]
    createMany?: MessageCreateManyHostInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AudioPackUncheckedCreateNestedManyWithoutHostsInput = {
    create?: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput> | AudioPackCreateWithoutHostsInput[] | AudioPackUncheckedCreateWithoutHostsInput[]
    connectOrCreate?: AudioPackCreateOrConnectWithoutHostsInput | AudioPackCreateOrConnectWithoutHostsInput[]
    connect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
  }

  export type EnumHostPersonaTypeFieldUpdateOperationsInput = {
    set?: $Enums.HostPersonaType
  }

  export type EnumTTSServiceFieldUpdateOperationsInput = {
    set?: $Enums.TTSService
  }

  export type TripUpdateManyWithoutHostNestedInput = {
    create?: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput> | TripCreateWithoutHostInput[] | TripUncheckedCreateWithoutHostInput[]
    connectOrCreate?: TripCreateOrConnectWithoutHostInput | TripCreateOrConnectWithoutHostInput[]
    upsert?: TripUpsertWithWhereUniqueWithoutHostInput | TripUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: TripCreateManyHostInputEnvelope
    set?: TripWhereUniqueInput | TripWhereUniqueInput[]
    disconnect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    delete?: TripWhereUniqueInput | TripWhereUniqueInput[]
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    update?: TripUpdateWithWhereUniqueWithoutHostInput | TripUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: TripUpdateManyWithWhereWithoutHostInput | TripUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: TripScalarWhereInput | TripScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutHostNestedInput = {
    create?: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput> | MessageCreateWithoutHostInput[] | MessageUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutHostInput | MessageCreateOrConnectWithoutHostInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutHostInput | MessageUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: MessageCreateManyHostInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutHostInput | MessageUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutHostInput | MessageUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AudioPackUpdateManyWithoutHostsNestedInput = {
    create?: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput> | AudioPackCreateWithoutHostsInput[] | AudioPackUncheckedCreateWithoutHostsInput[]
    connectOrCreate?: AudioPackCreateOrConnectWithoutHostsInput | AudioPackCreateOrConnectWithoutHostsInput[]
    upsert?: AudioPackUpsertWithWhereUniqueWithoutHostsInput | AudioPackUpsertWithWhereUniqueWithoutHostsInput[]
    set?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    disconnect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    delete?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    connect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    update?: AudioPackUpdateWithWhereUniqueWithoutHostsInput | AudioPackUpdateWithWhereUniqueWithoutHostsInput[]
    updateMany?: AudioPackUpdateManyWithWhereWithoutHostsInput | AudioPackUpdateManyWithWhereWithoutHostsInput[]
    deleteMany?: AudioPackScalarWhereInput | AudioPackScalarWhereInput[]
  }

  export type TripUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput> | TripCreateWithoutHostInput[] | TripUncheckedCreateWithoutHostInput[]
    connectOrCreate?: TripCreateOrConnectWithoutHostInput | TripCreateOrConnectWithoutHostInput[]
    upsert?: TripUpsertWithWhereUniqueWithoutHostInput | TripUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: TripCreateManyHostInputEnvelope
    set?: TripWhereUniqueInput | TripWhereUniqueInput[]
    disconnect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    delete?: TripWhereUniqueInput | TripWhereUniqueInput[]
    connect?: TripWhereUniqueInput | TripWhereUniqueInput[]
    update?: TripUpdateWithWhereUniqueWithoutHostInput | TripUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: TripUpdateManyWithWhereWithoutHostInput | TripUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: TripScalarWhereInput | TripScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput> | MessageCreateWithoutHostInput[] | MessageUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutHostInput | MessageCreateOrConnectWithoutHostInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutHostInput | MessageUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: MessageCreateManyHostInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutHostInput | MessageUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutHostInput | MessageUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AudioPackUncheckedUpdateManyWithoutHostsNestedInput = {
    create?: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput> | AudioPackCreateWithoutHostsInput[] | AudioPackUncheckedCreateWithoutHostsInput[]
    connectOrCreate?: AudioPackCreateOrConnectWithoutHostsInput | AudioPackCreateOrConnectWithoutHostsInput[]
    upsert?: AudioPackUpsertWithWhereUniqueWithoutHostsInput | AudioPackUpsertWithWhereUniqueWithoutHostsInput[]
    set?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    disconnect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    delete?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    connect?: AudioPackWhereUniqueInput | AudioPackWhereUniqueInput[]
    update?: AudioPackUpdateWithWhereUniqueWithoutHostsInput | AudioPackUpdateWithWhereUniqueWithoutHostsInput[]
    updateMany?: AudioPackUpdateManyWithWhereWithoutHostsInput | AudioPackUpdateManyWithWhereWithoutHostsInput[]
    deleteMany?: AudioPackScalarWhereInput | AudioPackScalarWhereInput[]
  }

  export type HostProfileCreateNestedManyWithoutAudioPacksInput = {
    create?: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput> | HostProfileCreateWithoutAudioPacksInput[] | HostProfileUncheckedCreateWithoutAudioPacksInput[]
    connectOrCreate?: HostProfileCreateOrConnectWithoutAudioPacksInput | HostProfileCreateOrConnectWithoutAudioPacksInput[]
    connect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
  }

  export type HostProfileUncheckedCreateNestedManyWithoutAudioPacksInput = {
    create?: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput> | HostProfileCreateWithoutAudioPacksInput[] | HostProfileUncheckedCreateWithoutAudioPacksInput[]
    connectOrCreate?: HostProfileCreateOrConnectWithoutAudioPacksInput | HostProfileCreateOrConnectWithoutAudioPacksInput[]
    connect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
  }

  export type HostProfileUpdateManyWithoutAudioPacksNestedInput = {
    create?: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput> | HostProfileCreateWithoutAudioPacksInput[] | HostProfileUncheckedCreateWithoutAudioPacksInput[]
    connectOrCreate?: HostProfileCreateOrConnectWithoutAudioPacksInput | HostProfileCreateOrConnectWithoutAudioPacksInput[]
    upsert?: HostProfileUpsertWithWhereUniqueWithoutAudioPacksInput | HostProfileUpsertWithWhereUniqueWithoutAudioPacksInput[]
    set?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    disconnect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    delete?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    connect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    update?: HostProfileUpdateWithWhereUniqueWithoutAudioPacksInput | HostProfileUpdateWithWhereUniqueWithoutAudioPacksInput[]
    updateMany?: HostProfileUpdateManyWithWhereWithoutAudioPacksInput | HostProfileUpdateManyWithWhereWithoutAudioPacksInput[]
    deleteMany?: HostProfileScalarWhereInput | HostProfileScalarWhereInput[]
  }

  export type HostProfileUncheckedUpdateManyWithoutAudioPacksNestedInput = {
    create?: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput> | HostProfileCreateWithoutAudioPacksInput[] | HostProfileUncheckedCreateWithoutAudioPacksInput[]
    connectOrCreate?: HostProfileCreateOrConnectWithoutAudioPacksInput | HostProfileCreateOrConnectWithoutAudioPacksInput[]
    upsert?: HostProfileUpsertWithWhereUniqueWithoutAudioPacksInput | HostProfileUpsertWithWhereUniqueWithoutAudioPacksInput[]
    set?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    disconnect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    delete?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    connect?: HostProfileWhereUniqueInput | HostProfileWhereUniqueInput[]
    update?: HostProfileUpdateWithWhereUniqueWithoutAudioPacksInput | HostProfileUpdateWithWhereUniqueWithoutAudioPacksInput[]
    updateMany?: HostProfileUpdateManyWithWhereWithoutAudioPacksInput | HostProfileUpdateManyWithWhereWithoutAudioPacksInput[]
    deleteMany?: HostProfileScalarWhereInput | HostProfileScalarWhereInput[]
  }

  export type EnumBanterEventContextFieldUpdateOperationsInput = {
    set?: $Enums.BanterEventContext
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTripStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TripStatus | EnumTripStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTripStatusFilter<$PrismaModel> | $Enums.TripStatus
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumTripStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TripStatus | EnumTripStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TripStatus[] | ListEnumTripStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTripStatusWithAggregatesFilter<$PrismaModel> | $Enums.TripStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTripStatusFilter<$PrismaModel>
    _max?: NestedEnumTripStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPOICategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.POICategory | EnumPOICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPOICategoryFilter<$PrismaModel> | $Enums.POICategory
  }

  export type NestedEnumPOICategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.POICategory | EnumPOICategoryFieldRefInput<$PrismaModel>
    in?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.POICategory[] | ListEnumPOICategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPOICategoryWithAggregatesFilter<$PrismaModel> | $Enums.POICategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPOICategoryFilter<$PrismaModel>
    _max?: NestedEnumPOICategoryFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumHostPersonaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HostPersonaType | EnumHostPersonaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHostPersonaTypeFilter<$PrismaModel> | $Enums.HostPersonaType
  }

  export type NestedEnumTTSServiceFilter<$PrismaModel = never> = {
    equals?: $Enums.TTSService | EnumTTSServiceFieldRefInput<$PrismaModel>
    in?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    notIn?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    not?: NestedEnumTTSServiceFilter<$PrismaModel> | $Enums.TTSService
  }

  export type NestedEnumHostPersonaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostPersonaType | EnumHostPersonaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostPersonaType[] | ListEnumHostPersonaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHostPersonaTypeWithAggregatesFilter<$PrismaModel> | $Enums.HostPersonaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostPersonaTypeFilter<$PrismaModel>
    _max?: NestedEnumHostPersonaTypeFilter<$PrismaModel>
  }

  export type NestedEnumTTSServiceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TTSService | EnumTTSServiceFieldRefInput<$PrismaModel>
    in?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    notIn?: $Enums.TTSService[] | ListEnumTTSServiceFieldRefInput<$PrismaModel>
    not?: NestedEnumTTSServiceWithAggregatesFilter<$PrismaModel> | $Enums.TTSService
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTTSServiceFilter<$PrismaModel>
    _max?: NestedEnumTTSServiceFilter<$PrismaModel>
  }

  export type NestedEnumBanterEventContextFilter<$PrismaModel = never> = {
    equals?: $Enums.BanterEventContext | EnumBanterEventContextFieldRefInput<$PrismaModel>
    in?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    not?: NestedEnumBanterEventContextFilter<$PrismaModel> | $Enums.BanterEventContext
  }

  export type NestedEnumBanterEventContextWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BanterEventContext | EnumBanterEventContextFieldRefInput<$PrismaModel>
    in?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanterEventContext[] | ListEnumBanterEventContextFieldRefInput<$PrismaModel>
    not?: NestedEnumBanterEventContextWithAggregatesFilter<$PrismaModel> | $Enums.BanterEventContext
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBanterEventContextFilter<$PrismaModel>
    _max?: NestedEnumBanterEventContextFilter<$PrismaModel>
  }

  export type TripCreateWithoutUserInput = {
    id?: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
    host: HostProfileCreateNestedOneWithoutTripsInput
  }

  export type TripUncheckedCreateWithoutUserInput = {
    id?: string
    hostId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type TripCreateOrConnectWithoutUserInput = {
    where: TripWhereUniqueInput
    create: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput>
  }

  export type TripCreateManyUserInputEnvelope = {
    data: TripCreateManyUserInput | TripCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TripUpsertWithWhereUniqueWithoutUserInput = {
    where: TripWhereUniqueInput
    update: XOR<TripUpdateWithoutUserInput, TripUncheckedUpdateWithoutUserInput>
    create: XOR<TripCreateWithoutUserInput, TripUncheckedCreateWithoutUserInput>
  }

  export type TripUpdateWithWhereUniqueWithoutUserInput = {
    where: TripWhereUniqueInput
    data: XOR<TripUpdateWithoutUserInput, TripUncheckedUpdateWithoutUserInput>
  }

  export type TripUpdateManyWithWhereWithoutUserInput = {
    where: TripScalarWhereInput
    data: XOR<TripUpdateManyMutationInput, TripUncheckedUpdateManyWithoutUserInput>
  }

  export type TripScalarWhereInput = {
    AND?: TripScalarWhereInput | TripScalarWhereInput[]
    OR?: TripScalarWhereInput[]
    NOT?: TripScalarWhereInput | TripScalarWhereInput[]
    id?: StringFilter<"Trip"> | string
    userId?: StringFilter<"Trip"> | string
    hostId?: StringFilter<"Trip"> | string
    status?: EnumTripStatusFilter<"Trip"> | $Enums.TripStatus
    originLat?: FloatFilter<"Trip"> | number
    originLng?: FloatFilter<"Trip"> | number
    destinationLat?: FloatFilter<"Trip"> | number
    destinationLng?: FloatFilter<"Trip"> | number
    routeGeometry?: JsonNullableFilter<"Trip">
    startedAt?: DateTimeFilter<"Trip"> | Date | string
    endedAt?: DateTimeNullableFilter<"Trip"> | Date | string | null
  }

  export type POICreateWithoutPartnerInput = {
    id?: string
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    messages?: MessageCreateNestedManyWithoutPoiInput
  }

  export type POIUncheckedCreateWithoutPartnerInput = {
    id?: string
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    messages?: MessageUncheckedCreateNestedManyWithoutPoiInput
  }

  export type POICreateOrConnectWithoutPartnerInput = {
    where: POIWhereUniqueInput
    create: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput>
  }

  export type POICreateManyPartnerInputEnvelope = {
    data: POICreateManyPartnerInput | POICreateManyPartnerInput[]
    skipDuplicates?: boolean
  }

  export type POIUpsertWithWhereUniqueWithoutPartnerInput = {
    where: POIWhereUniqueInput
    update: XOR<POIUpdateWithoutPartnerInput, POIUncheckedUpdateWithoutPartnerInput>
    create: XOR<POICreateWithoutPartnerInput, POIUncheckedCreateWithoutPartnerInput>
  }

  export type POIUpdateWithWhereUniqueWithoutPartnerInput = {
    where: POIWhereUniqueInput
    data: XOR<POIUpdateWithoutPartnerInput, POIUncheckedUpdateWithoutPartnerInput>
  }

  export type POIUpdateManyWithWhereWithoutPartnerInput = {
    where: POIScalarWhereInput
    data: XOR<POIUpdateManyMutationInput, POIUncheckedUpdateManyWithoutPartnerInput>
  }

  export type POIScalarWhereInput = {
    AND?: POIScalarWhereInput | POIScalarWhereInput[]
    OR?: POIScalarWhereInput[]
    NOT?: POIScalarWhereInput | POIScalarWhereInput[]
    id?: StringFilter<"POI"> | string
    partnerId?: StringNullableFilter<"POI"> | string | null
    name?: StringFilter<"POI"> | string
    description?: StringFilter<"POI"> | string
    category?: EnumPOICategoryFilter<"POI"> | $Enums.POICategory
    latitude?: FloatFilter<"POI"> | number
    longitude?: FloatFilter<"POI"> | number
    geofenceRadiusMeters?: IntFilter<"POI"> | number
  }

  export type UserCreateWithoutTripsInput = {
    id?: string
    firebaseUid: string
    activeTripId?: string | null
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutTripsInput = {
    id?: string
    firebaseUid: string
    activeTripId?: string | null
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTripsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
  }

  export type HostProfileCreateWithoutTripsInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    messages?: MessageCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackCreateNestedManyWithoutHostsInput
  }

  export type HostProfileUncheckedCreateWithoutTripsInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    messages?: MessageUncheckedCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackUncheckedCreateNestedManyWithoutHostsInput
  }

  export type HostProfileCreateOrConnectWithoutTripsInput = {
    where: HostProfileWhereUniqueInput
    create: XOR<HostProfileCreateWithoutTripsInput, HostProfileUncheckedCreateWithoutTripsInput>
  }

  export type UserUpsertWithoutTripsInput = {
    update: XOR<UserUpdateWithoutTripsInput, UserUncheckedUpdateWithoutTripsInput>
    create: XOR<UserCreateWithoutTripsInput, UserUncheckedCreateWithoutTripsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTripsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTripsInput, UserUncheckedUpdateWithoutTripsInput>
  }

  export type UserUpdateWithoutTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firebaseUid?: StringFieldUpdateOperationsInput | string
    activeTripId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostProfileUpsertWithoutTripsInput = {
    update: XOR<HostProfileUpdateWithoutTripsInput, HostProfileUncheckedUpdateWithoutTripsInput>
    create: XOR<HostProfileCreateWithoutTripsInput, HostProfileUncheckedCreateWithoutTripsInput>
    where?: HostProfileWhereInput
  }

  export type HostProfileUpdateToOneWithWhereWithoutTripsInput = {
    where?: HostProfileWhereInput
    data: XOR<HostProfileUpdateWithoutTripsInput, HostProfileUncheckedUpdateWithoutTripsInput>
  }

  export type HostProfileUpdateWithoutTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUpdateManyWithoutHostsNestedInput
  }

  export type HostProfileUncheckedUpdateWithoutTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUncheckedUpdateManyWithoutHostsNestedInput
  }

  export type MessageCreateWithoutPoiInput = {
    id?: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerCreateNestedManyWithoutMessageInput
    host: HostProfileCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutPoiInput = {
    id?: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutPoiInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput>
  }

  export type MessageCreateManyPoiInputEnvelope = {
    data: MessageCreateManyPoiInput | MessageCreateManyPoiInput[]
    skipDuplicates?: boolean
  }

  export type PartnerCreateWithoutPoisInput = {
    id?: string
    name: string
    contactEmail: string
    createdAt?: Date | string
  }

  export type PartnerUncheckedCreateWithoutPoisInput = {
    id?: string
    name: string
    contactEmail: string
    createdAt?: Date | string
  }

  export type PartnerCreateOrConnectWithoutPoisInput = {
    where: PartnerWhereUniqueInput
    create: XOR<PartnerCreateWithoutPoisInput, PartnerUncheckedCreateWithoutPoisInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutPoiInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutPoiInput, MessageUncheckedUpdateWithoutPoiInput>
    create: XOR<MessageCreateWithoutPoiInput, MessageUncheckedCreateWithoutPoiInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutPoiInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutPoiInput, MessageUncheckedUpdateWithoutPoiInput>
  }

  export type MessageUpdateManyWithWhereWithoutPoiInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutPoiInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    poiId?: StringFilter<"Message"> | string
    hostId?: StringFilter<"Message"> | string
    textContent?: StringFilter<"Message"> | string
    pregeneratedAudioUrl?: StringNullableFilter<"Message"> | string | null
  }

  export type PartnerUpsertWithoutPoisInput = {
    update: XOR<PartnerUpdateWithoutPoisInput, PartnerUncheckedUpdateWithoutPoisInput>
    create: XOR<PartnerCreateWithoutPoisInput, PartnerUncheckedCreateWithoutPoisInput>
    where?: PartnerWhereInput
  }

  export type PartnerUpdateToOneWithWhereWithoutPoisInput = {
    where?: PartnerWhereInput
    data: XOR<PartnerUpdateWithoutPoisInput, PartnerUncheckedUpdateWithoutPoisInput>
  }

  export type PartnerUpdateWithoutPoisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateWithoutPoisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriggerCreateWithoutMessageInput = {
    id?: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUncheckedCreateWithoutMessageInput = {
    id?: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type TriggerCreateOrConnectWithoutMessageInput = {
    where: TriggerWhereUniqueInput
    create: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput>
  }

  export type TriggerCreateManyMessageInputEnvelope = {
    data: TriggerCreateManyMessageInput | TriggerCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type POICreateWithoutMessagesInput = {
    id?: string
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
    partner?: PartnerCreateNestedOneWithoutPoisInput
  }

  export type POIUncheckedCreateWithoutMessagesInput = {
    id?: string
    partnerId?: string | null
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
  }

  export type POICreateOrConnectWithoutMessagesInput = {
    where: POIWhereUniqueInput
    create: XOR<POICreateWithoutMessagesInput, POIUncheckedCreateWithoutMessagesInput>
  }

  export type HostProfileCreateWithoutMessagesInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackCreateNestedManyWithoutHostsInput
  }

  export type HostProfileUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripUncheckedCreateNestedManyWithoutHostInput
    audioPacks?: AudioPackUncheckedCreateNestedManyWithoutHostsInput
  }

  export type HostProfileCreateOrConnectWithoutMessagesInput = {
    where: HostProfileWhereUniqueInput
    create: XOR<HostProfileCreateWithoutMessagesInput, HostProfileUncheckedCreateWithoutMessagesInput>
  }

  export type TriggerUpsertWithWhereUniqueWithoutMessageInput = {
    where: TriggerWhereUniqueInput
    update: XOR<TriggerUpdateWithoutMessageInput, TriggerUncheckedUpdateWithoutMessageInput>
    create: XOR<TriggerCreateWithoutMessageInput, TriggerUncheckedCreateWithoutMessageInput>
  }

  export type TriggerUpdateWithWhereUniqueWithoutMessageInput = {
    where: TriggerWhereUniqueInput
    data: XOR<TriggerUpdateWithoutMessageInput, TriggerUncheckedUpdateWithoutMessageInput>
  }

  export type TriggerUpdateManyWithWhereWithoutMessageInput = {
    where: TriggerScalarWhereInput
    data: XOR<TriggerUpdateManyMutationInput, TriggerUncheckedUpdateManyWithoutMessageInput>
  }

  export type TriggerScalarWhereInput = {
    AND?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
    OR?: TriggerScalarWhereInput[]
    NOT?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
    id?: StringFilter<"Trigger"> | string
    messageId?: StringFilter<"Trigger"> | string
    priority?: IntFilter<"Trigger"> | number
    conditions?: JsonFilter<"Trigger">
  }

  export type POIUpsertWithoutMessagesInput = {
    update: XOR<POIUpdateWithoutMessagesInput, POIUncheckedUpdateWithoutMessagesInput>
    create: XOR<POICreateWithoutMessagesInput, POIUncheckedCreateWithoutMessagesInput>
    where?: POIWhereInput
  }

  export type POIUpdateToOneWithWhereWithoutMessagesInput = {
    where?: POIWhereInput
    data: XOR<POIUpdateWithoutMessagesInput, POIUncheckedUpdateWithoutMessagesInput>
  }

  export type POIUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
    partner?: PartnerUpdateOneWithoutPoisNestedInput
  }

  export type POIUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnerId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
  }

  export type HostProfileUpsertWithoutMessagesInput = {
    update: XOR<HostProfileUpdateWithoutMessagesInput, HostProfileUncheckedUpdateWithoutMessagesInput>
    create: XOR<HostProfileCreateWithoutMessagesInput, HostProfileUncheckedCreateWithoutMessagesInput>
    where?: HostProfileWhereInput
  }

  export type HostProfileUpdateToOneWithWhereWithoutMessagesInput = {
    where?: HostProfileWhereInput
    data: XOR<HostProfileUpdateWithoutMessagesInput, HostProfileUncheckedUpdateWithoutMessagesInput>
  }

  export type HostProfileUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUpdateManyWithoutHostsNestedInput
  }

  export type HostProfileUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUncheckedUpdateManyWithoutHostNestedInput
    audioPacks?: AudioPackUncheckedUpdateManyWithoutHostsNestedInput
  }

  export type MessageCreateWithoutTriggersInput = {
    id?: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    poi: POICreateNestedOneWithoutMessagesInput
    host: HostProfileCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutTriggersInput = {
    id?: string
    poiId: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
  }

  export type MessageCreateOrConnectWithoutTriggersInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutTriggersInput, MessageUncheckedCreateWithoutTriggersInput>
  }

  export type MessageUpsertWithoutTriggersInput = {
    update: XOR<MessageUpdateWithoutTriggersInput, MessageUncheckedUpdateWithoutTriggersInput>
    create: XOR<MessageCreateWithoutTriggersInput, MessageUncheckedCreateWithoutTriggersInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutTriggersInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutTriggersInput, MessageUncheckedUpdateWithoutTriggersInput>
  }

  export type MessageUpdateWithoutTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    poi?: POIUpdateOneRequiredWithoutMessagesNestedInput
    host?: HostProfileUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    poiId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TripCreateWithoutHostInput = {
    id?: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTripsInput
  }

  export type TripUncheckedCreateWithoutHostInput = {
    id?: string
    userId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type TripCreateOrConnectWithoutHostInput = {
    where: TripWhereUniqueInput
    create: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput>
  }

  export type TripCreateManyHostInputEnvelope = {
    data: TripCreateManyHostInput | TripCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutHostInput = {
    id?: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerCreateNestedManyWithoutMessageInput
    poi: POICreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutHostInput = {
    id?: string
    poiId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
    triggers?: TriggerUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutHostInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput>
  }

  export type MessageCreateManyHostInputEnvelope = {
    data: MessageCreateManyHostInput | MessageCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type AudioPackCreateWithoutHostsInput = {
    id?: string
    name: string
    description: string
    musicThemeId: string
  }

  export type AudioPackUncheckedCreateWithoutHostsInput = {
    id?: string
    name: string
    description: string
    musicThemeId: string
  }

  export type AudioPackCreateOrConnectWithoutHostsInput = {
    where: AudioPackWhereUniqueInput
    create: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput>
  }

  export type TripUpsertWithWhereUniqueWithoutHostInput = {
    where: TripWhereUniqueInput
    update: XOR<TripUpdateWithoutHostInput, TripUncheckedUpdateWithoutHostInput>
    create: XOR<TripCreateWithoutHostInput, TripUncheckedCreateWithoutHostInput>
  }

  export type TripUpdateWithWhereUniqueWithoutHostInput = {
    where: TripWhereUniqueInput
    data: XOR<TripUpdateWithoutHostInput, TripUncheckedUpdateWithoutHostInput>
  }

  export type TripUpdateManyWithWhereWithoutHostInput = {
    where: TripScalarWhereInput
    data: XOR<TripUpdateManyMutationInput, TripUncheckedUpdateManyWithoutHostInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutHostInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutHostInput, MessageUncheckedUpdateWithoutHostInput>
    create: XOR<MessageCreateWithoutHostInput, MessageUncheckedCreateWithoutHostInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutHostInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutHostInput, MessageUncheckedUpdateWithoutHostInput>
  }

  export type MessageUpdateManyWithWhereWithoutHostInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutHostInput>
  }

  export type AudioPackUpsertWithWhereUniqueWithoutHostsInput = {
    where: AudioPackWhereUniqueInput
    update: XOR<AudioPackUpdateWithoutHostsInput, AudioPackUncheckedUpdateWithoutHostsInput>
    create: XOR<AudioPackCreateWithoutHostsInput, AudioPackUncheckedCreateWithoutHostsInput>
  }

  export type AudioPackUpdateWithWhereUniqueWithoutHostsInput = {
    where: AudioPackWhereUniqueInput
    data: XOR<AudioPackUpdateWithoutHostsInput, AudioPackUncheckedUpdateWithoutHostsInput>
  }

  export type AudioPackUpdateManyWithWhereWithoutHostsInput = {
    where: AudioPackScalarWhereInput
    data: XOR<AudioPackUpdateManyMutationInput, AudioPackUncheckedUpdateManyWithoutHostsInput>
  }

  export type AudioPackScalarWhereInput = {
    AND?: AudioPackScalarWhereInput | AudioPackScalarWhereInput[]
    OR?: AudioPackScalarWhereInput[]
    NOT?: AudioPackScalarWhereInput | AudioPackScalarWhereInput[]
    id?: StringFilter<"AudioPack"> | string
    name?: StringFilter<"AudioPack"> | string
    description?: StringFilter<"AudioPack"> | string
    musicThemeId?: StringFilter<"AudioPack"> | string
  }

  export type HostProfileCreateWithoutAudioPacksInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripCreateNestedManyWithoutHostInput
    messages?: MessageCreateNestedManyWithoutHostInput
  }

  export type HostProfileUncheckedCreateWithoutAudioPacksInput = {
    id?: string
    name: string
    personaType: $Enums.HostPersonaType
    description: string
    ttsService: $Enums.TTSService
    ttsVoiceId: string
    trips?: TripUncheckedCreateNestedManyWithoutHostInput
    messages?: MessageUncheckedCreateNestedManyWithoutHostInput
  }

  export type HostProfileCreateOrConnectWithoutAudioPacksInput = {
    where: HostProfileWhereUniqueInput
    create: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput>
  }

  export type HostProfileUpsertWithWhereUniqueWithoutAudioPacksInput = {
    where: HostProfileWhereUniqueInput
    update: XOR<HostProfileUpdateWithoutAudioPacksInput, HostProfileUncheckedUpdateWithoutAudioPacksInput>
    create: XOR<HostProfileCreateWithoutAudioPacksInput, HostProfileUncheckedCreateWithoutAudioPacksInput>
  }

  export type HostProfileUpdateWithWhereUniqueWithoutAudioPacksInput = {
    where: HostProfileWhereUniqueInput
    data: XOR<HostProfileUpdateWithoutAudioPacksInput, HostProfileUncheckedUpdateWithoutAudioPacksInput>
  }

  export type HostProfileUpdateManyWithWhereWithoutAudioPacksInput = {
    where: HostProfileScalarWhereInput
    data: XOR<HostProfileUpdateManyMutationInput, HostProfileUncheckedUpdateManyWithoutAudioPacksInput>
  }

  export type HostProfileScalarWhereInput = {
    AND?: HostProfileScalarWhereInput | HostProfileScalarWhereInput[]
    OR?: HostProfileScalarWhereInput[]
    NOT?: HostProfileScalarWhereInput | HostProfileScalarWhereInput[]
    id?: StringFilter<"HostProfile"> | string
    name?: StringFilter<"HostProfile"> | string
    personaType?: EnumHostPersonaTypeFilter<"HostProfile"> | $Enums.HostPersonaType
    description?: StringFilter<"HostProfile"> | string
    ttsService?: EnumTTSServiceFilter<"HostProfile"> | $Enums.TTSService
    ttsVoiceId?: StringFilter<"HostProfile"> | string
  }

  export type TripCreateManyUserInput = {
    id?: string
    hostId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type TripUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    host?: HostProfileUpdateOneRequiredWithoutTripsNestedInput
  }

  export type TripUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TripUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type POICreateManyPartnerInput = {
    id?: string
    name: string
    description: string
    category: $Enums.POICategory
    latitude: number
    longitude: number
    geofenceRadiusMeters: number
  }

  export type POIUpdateWithoutPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
    messages?: MessageUpdateManyWithoutPoiNestedInput
  }

  export type POIUncheckedUpdateWithoutPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutPoiNestedInput
  }

  export type POIUncheckedUpdateManyWithoutPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumPOICategoryFieldUpdateOperationsInput | $Enums.POICategory
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    geofenceRadiusMeters?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyPoiInput = {
    id?: string
    hostId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
  }

  export type MessageUpdateWithoutPoiInput = {
    id?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUpdateManyWithoutMessageNestedInput
    host?: HostProfileUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutPoiInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutPoiInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TriggerCreateManyMessageInput = {
    id?: string
    priority: number
    conditions: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    conditions?: JsonNullValueInput | InputJsonValue
  }

  export type TripCreateManyHostInput = {
    id?: string
    userId: string
    status?: $Enums.TripStatus
    originLat: number
    originLng: number
    destinationLat: number
    destinationLng: number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type MessageCreateManyHostInput = {
    id?: string
    poiId: string
    textContent: string
    pregeneratedAudioUrl?: string | null
  }

  export type TripUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTripsNestedInput
  }

  export type TripUncheckedUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TripUncheckedUpdateManyWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumTripStatusFieldUpdateOperationsInput | $Enums.TripStatus
    originLat?: FloatFieldUpdateOperationsInput | number
    originLng?: FloatFieldUpdateOperationsInput | number
    destinationLat?: FloatFieldUpdateOperationsInput | number
    destinationLng?: FloatFieldUpdateOperationsInput | number
    routeGeometry?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUpdateManyWithoutMessageNestedInput
    poi?: POIUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    poiId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    triggers?: TriggerUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    poiId?: StringFieldUpdateOperationsInput | string
    textContent?: StringFieldUpdateOperationsInput | string
    pregeneratedAudioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AudioPackUpdateWithoutHostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
  }

  export type AudioPackUncheckedUpdateWithoutHostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
  }

  export type AudioPackUncheckedUpdateManyWithoutHostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    musicThemeId?: StringFieldUpdateOperationsInput | string
  }

  export type HostProfileUpdateWithoutAudioPacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUpdateManyWithoutHostNestedInput
    messages?: MessageUpdateManyWithoutHostNestedInput
  }

  export type HostProfileUncheckedUpdateWithoutAudioPacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
    trips?: TripUncheckedUpdateManyWithoutHostNestedInput
    messages?: MessageUncheckedUpdateManyWithoutHostNestedInput
  }

  export type HostProfileUncheckedUpdateManyWithoutAudioPacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    personaType?: EnumHostPersonaTypeFieldUpdateOperationsInput | $Enums.HostPersonaType
    description?: StringFieldUpdateOperationsInput | string
    ttsService?: EnumTTSServiceFieldUpdateOperationsInput | $Enums.TTSService
    ttsVoiceId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartnerCountOutputTypeDefaultArgs instead
     */
    export type PartnerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartnerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use POICountOutputTypeDefaultArgs instead
     */
    export type POICountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = POICountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HostProfileCountOutputTypeDefaultArgs instead
     */
    export type HostProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HostProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AudioPackCountOutputTypeDefaultArgs instead
     */
    export type AudioPackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AudioPackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartnerDefaultArgs instead
     */
    export type PartnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartnerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TripDefaultArgs instead
     */
    export type TripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TripDefaultArgs<ExtArgs>
    /**
     * @deprecated Use POIDefaultArgs instead
     */
    export type POIArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = POIDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TriggerDefaultArgs instead
     */
    export type TriggerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TriggerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HostProfileDefaultArgs instead
     */
    export type HostProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HostProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AudioPackDefaultArgs instead
     */
    export type AudioPackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AudioPackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BanterEventDefaultArgs instead
     */
    export type BanterEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BanterEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}