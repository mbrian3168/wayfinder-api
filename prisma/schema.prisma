generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url= env("DATABASE_URL")
}

enum TripStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum POICategory {
  LANDMARK
  NATURE
  PARTNER_LOCATION
  FUN_FACT
  TRAFFIC_ALERT
}

enum HostPersonaType {
  HOST
  NAVIGATOR
}

enum TTSService {
  ELEVENLABS
  GOOGLE_TTS
  PLAY_HT
}

enum BanterEventContext {
  TRAFFIC_JAM
  BEAUTIFUL_WEATHER
  HALFWAY_POINT
  NEARING_DESTINATION
}

model User {
  id             String    @id @default(uuid())
  firebaseUid    String    @unique @map("firebase_uid")
  activeTripId   String?   @map("active_trip_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  trips          Trip[]

  @@map("users")
}

model Partner {
  id            String    @id @default(uuid())
  name          String
  contactEmail  String    @unique @map("contact_email")
  createdAt     DateTime  @default(now()) @map("created_at")
  pois          POI[]

  @@map("partners")
}

model Trip {
  id             String     @id @default(uuid())
  userId         String     @map("user_id")
  hostId         String     @map("host_id")
  status         TripStatus @default(ACTIVE)
  originLat      Float      @map("origin_lat")
  originLng      Float      @map("origin_lng")
  destinationLat Float      @map("destination_lat")
  destinationLng Float      @map("destination_lng")
  routeGeometry  Json?      @map("route_geometry")
  startedAt      DateTime   @default(now()) @map("started_at")
  endedAt        DateTime?  @map("ended_at")

  user User @relation(fields: [userId], references: [id])
  host HostProfile @relation(fields: [hostId], references: [id])

  @@map("trips")
}

model POI {
  id                   String      @id @default(uuid())
  partnerId            String?     @map("partner_id")
  name                 String
  description          String
  category             POICategory
  latitude             Float
  longitude            Float
  geofenceRadiusMeters Int         @map("geofence_radius_meters")
  messages             Message[]

  partner Partner? @relation(fields: [partnerId], references: [id])

  @@map("pois")
}

model Message {
  id                   String   @id @default(uuid())
  poiId                String   @map("poi_id")
  hostId               String   @map("host_id")
  textContent          String   @map("text_content")
  pregeneratedAudioUrl String?  @map("pregenerated_audio_url")
  triggers             Trigger[]

  poi POI @relation(fields: [poiId], references: [id])
  host HostProfile @relation(fields: [hostId], references: [id])

  @@map("messages")
}

model Trigger {
  id         String @id @default(uuid())
  messageId  String @map("message_id")
  priority   Int
  conditions Json

  message Message @relation(fields: [messageId], references: [id])

  @@map("triggers")
}

model HostProfile {
  id           String          @id @default(uuid())
  name         String          @unique
  personaType  HostPersonaType @map("persona_type")
  description  String
  ttsService   TTSService      @map("tts_service")
  ttsVoiceId   String          @map("tts_voice_id")
  
  trips        Trip[]
  messages     Message[]
  audioPacks   AudioPack[]     @relation("AudioPackHosts")

  @@map("host_profiles")
}

model AudioPack {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String
  musicThemeId  String   @map("music_theme_id")
  
  hosts         HostProfile[] @relation("AudioPackHosts")

  @@map("audio_packs")
}

model BanterEvent {
  id                String             @id @default(uuid())
  triggeringContext BanterEventContext @map("triggering_context")
  hostLine          String             @map("host_line")
  navigatorLine     String             @map("navigator_line")

  @@map("banter_events")
}
